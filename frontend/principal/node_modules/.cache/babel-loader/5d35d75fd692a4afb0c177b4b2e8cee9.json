{"ast":null,"code":"import superagentIntercept from \"superagent-intercept\";\nimport superagentPromise from \"superagent-promise\";\nimport _superagent from \"superagent\";\n/**\n * Base Superagent config.\n *\n * *** MUST HAVE ONLY COMMON BEHAVIOUR TO ALL SUPERAGENT BASIC CHILDREN ***\n * *** AVOID SET CUSTOM BEHAVIOURS HERE ***\n */\n\nvar superagent = superagentPromise(_superagent, global.Promise);\nexport default superagent;\nexport var enhanceSuperAgent = function enhanceSuperAgent(superagentInstance, baseApiPath) {\n  var headersPlugin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n  var interceptorPlugin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n\n  var applyPlugins = function applyPlugins(req) {\n    return req.use(headersPlugin).use(superagentIntercept(interceptorPlugin));\n  };\n\n  return {\n    del: function del(url) {\n      return applyPlugins(superagentInstance.del(\"\".concat(baseApiPath).concat(url)));\n    },\n    get: function get(url) {\n      return applyPlugins(superagentInstance.get(\"\".concat(baseApiPath).concat(url)));\n    },\n    put: function put(url, body) {\n      return applyPlugins(superagentInstance.put(\"\".concat(baseApiPath).concat(url), body));\n    },\n    patch: function patch(url, body) {\n      return applyPlugins(superagentInstance.patch(\"\".concat(baseApiPath).concat(url), body));\n    },\n    post: function post(url, body) {\n      return applyPlugins(superagentInstance.post(\"\".concat(baseApiPath).concat(url), body));\n    },\n    custom: function custom(method, url, body) {\n      var extraHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var req = superagentInstance(method, \"\".concat(baseApiPath).concat(url));\n      if (extraHeaders) Object.keys(extraHeaders).forEach(function (e) {\n        req.set(e, extraHeaders[e]);\n      });\n      if (body) req.send(body);\n      return applyPlugins(req);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/brunogomes/desafio/frontend/principal/src/common/superagent/SuperagentBase.js"],"names":["superagentIntercept","superagentPromise","_superagent","superagent","global","Promise","enhanceSuperAgent","superagentInstance","baseApiPath","headersPlugin","interceptorPlugin","applyPlugins","req","use","del","url","get","put","body","patch","post","custom","method","extraHeaders","Object","keys","forEach","e","set","send"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,sBAAhC;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,YAAxB;AAEA;;;;;;;AAOA,IAAMC,UAAU,GAAGF,iBAAiB,CAACC,WAAD,EAAcE,MAAM,CAACC,OAArB,CAApC;AAEA,eAAeF,UAAf;AAEA,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,kBAAD,EACCC,WADD,EAGkC;AAAA,MADjCC,aACiC,uEADjB,YAAM,CAAE,CACS;AAAA,MAAjCC,iBAAiC,uEAAb,YAAM,CAAE,CAAK;;AAElE,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD;AAAA,WAASA,GAAG,CAACC,GAAJ,CAAQJ,aAAR,EAAuBI,GAAvB,CAA2Bb,mBAAmB,CAACU,iBAAD,CAA9C,CAAT;AAAA,GAArB;;AAEA,SAAO;AACNI,IAAAA,GAAG,EAAE,aAAAC,GAAG;AAAA,aAAIJ,YAAY,CAACJ,kBAAkB,CAACO,GAAnB,WAA0BN,WAA1B,SAAwCO,GAAxC,EAAD,CAAhB;AAAA,KADF;AAENC,IAAAA,GAAG,EAAE,aAAAD,GAAG;AAAA,aAAIJ,YAAY,CAACJ,kBAAkB,CAACS,GAAnB,WAA0BR,WAA1B,SAAwCO,GAAxC,EAAD,CAAhB;AAAA,KAFF;AAGNE,IAAAA,GAAG,EAAE,aAACF,GAAD,EAAMG,IAAN;AAAA,aAAeP,YAAY,CAACJ,kBAAkB,CAACU,GAAnB,WAA0BT,WAA1B,SAAwCO,GAAxC,GAA+CG,IAA/C,CAAD,CAA3B;AAAA,KAHC;AAINC,IAAAA,KAAK,EAAE,eAACJ,GAAD,EAAMG,IAAN;AAAA,aAAeP,YAAY,CAACJ,kBAAkB,CAACY,KAAnB,WAA4BX,WAA5B,SAA0CO,GAA1C,GAAiDG,IAAjD,CAAD,CAA3B;AAAA,KAJD;AAKNE,IAAAA,IAAI,EAAE,cAACL,GAAD,EAAMG,IAAN;AAAA,aAAeP,YAAY,CAACJ,kBAAkB,CAACa,IAAnB,WAA2BZ,WAA3B,SAAyCO,GAAzC,GAAgDG,IAAhD,CAAD,CAA3B;AAAA,KALA;AAONG,IAAAA,MAAM,EAAE,gBAACC,MAAD,EAASP,GAAT,EAAcG,IAAd,EAA0C;AAAA,UAAtBK,YAAsB,uEAAP,EAAO;AACjD,UAAMX,GAAG,GAAGL,kBAAkB,CAACe,MAAD,YAAYd,WAAZ,SAA0BO,GAA1B,EAA9B;AAEA,UAAIQ,YAAJ,EACCC,MAAM,CAACC,IAAP,CAAYF,YAAZ,EAA0BG,OAA1B,CAAkC,UAACC,CAAD,EAAO;AACxCf,QAAAA,GAAG,CAACgB,GAAJ,CAAQD,CAAR,EAAWJ,YAAY,CAACI,CAAD,CAAvB;AACA,OAFD;AAID,UAAIT,IAAJ,EACCN,GAAG,CAACiB,IAAJ,CAASX,IAAT;AAED,aAAOP,YAAY,CAACC,GAAD,CAAnB;AACA;AAnBK,GAAP;AAqBA,CA5BM","sourcesContent":["import superagentIntercept from \"superagent-intercept\";\nimport superagentPromise from \"superagent-promise\";\nimport _superagent from \"superagent\";\n\n/**\n * Base Superagent config.\n *\n * *** MUST HAVE ONLY COMMON BEHAVIOUR TO ALL SUPERAGENT BASIC CHILDREN ***\n * *** AVOID SET CUSTOM BEHAVIOURS HERE ***\n */\n\nconst superagent = superagentPromise(_superagent, global.Promise);\n\nexport default superagent;\n\nexport const enhanceSuperAgent = (superagentInstance,\n                                  baseApiPath,\n                                  headersPlugin = () => {},\n                                  interceptorPlugin = () => {}) => {\n\n\tconst applyPlugins = (req) => req.use(headersPlugin).use(superagentIntercept(interceptorPlugin));\n\n\treturn {\n\t\tdel: url => applyPlugins(superagentInstance.del(`${baseApiPath}${url}`)),\n\t\tget: url => applyPlugins(superagentInstance.get(`${baseApiPath}${url}`)),\n\t\tput: (url, body) => applyPlugins(superagentInstance.put(`${baseApiPath}${url}`, body)),\n\t\tpatch: (url, body) => applyPlugins(superagentInstance.patch(`${baseApiPath}${url}`, body)),\n\t\tpost: (url, body) => applyPlugins(superagentInstance.post(`${baseApiPath}${url}`, body)),\n\n\t\tcustom: (method, url, body, extraHeaders = {}) => {\n\t\t\tconst req = superagentInstance(method, `${baseApiPath}${url}`);\n\n\t\t\tif (extraHeaders)\n\t\t\t\tObject.keys(extraHeaders).forEach((e) => {\n\t\t\t\t\treq.set(e, extraHeaders[e]);\n\t\t\t\t});\n\n\t\t\tif (body)\n\t\t\t\treq.send(body);\n\n\t\t\treturn applyPlugins(req);\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}