{"ast":null,"code":"import { FETCH_ALL_USERS, FETCH_ADDRESS_BY_ZIPCODE, CREATE_USER } from \"../../common/redux/RATypes\";\nimport RestAPI from \"../../common/RestAPI\";\nimport Notifications from \"../../common/ui/connected/Notifications/Notifications\";\nimport CommonActions from \"../../common/redux/CommonActions\";\n\nvar saveUser = function saveUser(data) {\n  return CommonActions.baseAsyncThunk(RestAPI.user.save(data), CREATE_USER, function (res, hasError) {\n    if (hasError && res.response) {\n      Notifications.addNotification(res.response.body.messages);\n      return res.response.body;\n    } else if (res && res.body && res.body.messages) {\n      Notifications.addNotification(res.body.messages);\n      return {\n        registeredSuccessfully: true\n      };\n    }\n  });\n};\n\nvar fetchAllUsers = function fetchAllUsers() {\n  return CommonActions.baseAsyncThunk(RestAPI.user.fetchAllUsers(), FETCH_ALL_USERS, function (res, hasError) {\n    if (hasError && res.response) {\n      Notifications.addNotification(res.response.body.messages);\n      return res.response.body;\n    } else if (res && res.body && res.body.messages) {\n      Notifications.addNotification(res.body.messages);\n      return res.body.data;\n    }\n  });\n};\n\nvar fetchAddressByZipcode = function fetchAddressByZipcode(zipcode) {\n  return CommonActions.baseAsyncThunk(RestAPI.addresses.fetchAddressByZipcode(zipcode), FETCH_ADDRESS_BY_ZIPCODE, function (res, hasError) {\n    if (hasError && res.response) {\n      Notifications.addNotification(res.response.body.messages);\n      return res.response.body;\n    } else if (res && res.body && res.body.messages) {\n      Notifications.addNotification(res.body.messages);\n      return res.body.data;\n    }\n  });\n};\n\nexport default {\n  fetchAllUsers: fetchAllUsers,\n  fetchAddressByZipcode: fetchAddressByZipcode,\n  saveUser: saveUser\n};","map":{"version":3,"sources":["/Users/brunogomes/desafio/frontend/principal/src/views/crud/CrudActions.js"],"names":["FETCH_ALL_USERS","FETCH_ADDRESS_BY_ZIPCODE","CREATE_USER","RestAPI","Notifications","CommonActions","saveUser","data","baseAsyncThunk","user","save","res","hasError","response","addNotification","body","messages","registeredSuccessfully","fetchAllUsers","fetchAddressByZipcode","zipcode","addresses"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,wBAA1B,EAAoDC,WAApD,QAAuE,4BAAvE;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,aAAP,MAA0B,uDAA1B;AACA,OAAOC,aAAP,MAA0B,kCAA1B;;AAEA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD;AAAA,SAAUF,aAAa,CAACG,cAAd,CACxBL,OAAO,CAACM,IAAR,CAAaC,IAAb,CAAkBH,IAAlB,CADwB,EAExBL,WAFwB,EAGxB,UAACS,GAAD,EAAMC,QAAN,EAAmB;AAClB,QAAIA,QAAQ,IAAID,GAAG,CAACE,QAApB,EAA8B;AAC7BT,MAAAA,aAAa,CAACU,eAAd,CAA8BH,GAAG,CAACE,QAAJ,CAAaE,IAAb,CAAkBC,QAAhD;AAEA,aAAOL,GAAG,CAACE,QAAJ,CAAaE,IAApB;AACA,KAJD,MAIO,IAAIJ,GAAG,IAAIA,GAAG,CAACI,IAAX,IAAmBJ,GAAG,CAACI,IAAJ,CAASC,QAAhC,EAA0C;AAChDZ,MAAAA,aAAa,CAACU,eAAd,CAA8BH,GAAG,CAACI,IAAJ,CAASC,QAAvC;AAEA,aAAO;AAACC,QAAAA,sBAAsB,EAAE;AAAzB,OAAP;AACA;AACD,GAbuB,CAAV;AAAA,CAAf;;AAeA,IAAIC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAMb,aAAa,CAACG,cAAd,CACzBL,OAAO,CAACM,IAAR,CAAaS,aAAb,EADyB,EAEzBlB,eAFyB,EAGzB,UAACW,GAAD,EAAMC,QAAN,EAAmB;AAGlB,QAAIA,QAAQ,IAAID,GAAG,CAACE,QAApB,EAA8B;AAC7BT,MAAAA,aAAa,CAACU,eAAd,CAA8BH,GAAG,CAACE,QAAJ,CAAaE,IAAb,CAAkBC,QAAhD;AAEA,aAAOL,GAAG,CAACE,QAAJ,CAAaE,IAApB;AACA,KAJD,MAIO,IAAIJ,GAAG,IAAIA,GAAG,CAACI,IAAX,IAAmBJ,GAAG,CAACI,IAAJ,CAASC,QAAhC,EAA0C;AAChDZ,MAAAA,aAAa,CAACU,eAAd,CAA8BH,GAAG,CAACI,IAAJ,CAASC,QAAvC;AACA,aAAOL,GAAG,CAACI,IAAJ,CAASR,IAAhB;AACA;AACD,GAdwB,CAAN;AAAA,CAApB;;AAgBA,IAAIY,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,OAAD;AAAA,SAAaf,aAAa,CAACG,cAAd,CACvCL,OAAO,CAACkB,SAAR,CAAkBF,qBAAlB,CAAwCC,OAAxC,CADuC,EAEvCnB,wBAFuC,EAGvC,UAACU,GAAD,EAAMC,QAAN,EAAmB;AAElB,QAAIA,QAAQ,IAAID,GAAG,CAACE,QAApB,EAA8B;AAC7BT,MAAAA,aAAa,CAACU,eAAd,CAA8BH,GAAG,CAACE,QAAJ,CAAaE,IAAb,CAAkBC,QAAhD;AAEA,aAAOL,GAAG,CAACE,QAAJ,CAAaE,IAApB;AACA,KAJD,MAIO,IAAIJ,GAAG,IAAIA,GAAG,CAACI,IAAX,IAAmBJ,GAAG,CAACI,IAAJ,CAASC,QAAhC,EAA0C;AAChDZ,MAAAA,aAAa,CAACU,eAAd,CAA8BH,GAAG,CAACI,IAAJ,CAASC,QAAvC;AACA,aAAOL,GAAG,CAACI,IAAJ,CAASR,IAAhB;AACA;AACD,GAbsC,CAAb;AAAA,CAA5B;;AAgBA,eAAe;AACdW,EAAAA,aAAa,EAAbA,aADc;AAEdC,EAAAA,qBAAqB,EAArBA,qBAFc;AAGdb,EAAAA,QAAQ,EAARA;AAHc,CAAf","sourcesContent":["import { FETCH_ALL_USERS, FETCH_ADDRESS_BY_ZIPCODE, CREATE_USER } from \"../../common/redux/RATypes\";\nimport RestAPI from \"../../common/RestAPI\";\nimport Notifications from \"../../common/ui/connected/Notifications/Notifications\";\nimport CommonActions from \"../../common/redux/CommonActions\";\n\nlet saveUser = (data) => CommonActions.baseAsyncThunk(\n\tRestAPI.user.save(data),\n\tCREATE_USER,\n\t(res, hasError) => {\n\t\tif (hasError && res.response) {\n\t\t\tNotifications.addNotification(res.response.body.messages);\n\n\t\t\treturn res.response.body;\n\t\t} else if (res && res.body && res.body.messages) {\n\t\t\tNotifications.addNotification(res.body.messages);\n\n\t\t\treturn {registeredSuccessfully: true};\n\t\t}\n\t});\n\nlet fetchAllUsers = () => CommonActions.baseAsyncThunk(\n\tRestAPI.user.fetchAllUsers(),\n\tFETCH_ALL_USERS,\n\t(res, hasError) => {\n\n\n\t\tif (hasError && res.response) {\n\t\t\tNotifications.addNotification(res.response.body.messages);\n\n\t\t\treturn res.response.body;\n\t\t} else if (res && res.body && res.body.messages) {\n\t\t\tNotifications.addNotification(res.body.messages);\n\t\t\treturn res.body.data;\n\t\t}\n\t});\n\nlet fetchAddressByZipcode = (zipcode) => CommonActions.baseAsyncThunk(\n\t\tRestAPI.addresses.fetchAddressByZipcode(zipcode),\n\t\tFETCH_ADDRESS_BY_ZIPCODE,\n\t\t(res, hasError) => {\n\t\n\t\t\tif (hasError && res.response) {\n\t\t\t\tNotifications.addNotification(res.response.body.messages);\n\t\n\t\t\t\treturn res.response.body;\n\t\t\t} else if (res && res.body && res.body.messages) {\n\t\t\t\tNotifications.addNotification(res.body.messages);\n\t\t\t\treturn res.body.data;\n\t\t\t}\n\t\t});\n\n\nexport default {\n\tfetchAllUsers,\n\tfetchAddressByZipcode,\n\tsaveUser,\n};"]},"metadata":{},"sourceType":"module"}