{"ast":null,"code":"import _objectSpread from \"/Users/brunogomes/desafio/frontend/principal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport CommonReducer from \"./CommonReducer\";\nimport { CLEAR_REDUCER_INFO } from \"./RATypes\";\nimport AuthReducer from \"../../views/auth/AuthReducer\";\nvar defaultReducers = {\n  common: CommonReducer,\n  auth: AuthReducer\n};\n\nvar createRootReducerWithSugar = function createRootReducerWithSugar() {\n  var asyncReducers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (state, action) {\n    if (action.type === CLEAR_REDUCER_INFO) {\n      state = _objectSpread({}, state);\n      if (!Array.isArray(action.dataTarget)) action.dataTarget = [action.dataTarget];\n      action.dataTarget.forEach(function (field) {\n        state[action.reducer][field] = action.cleanValue;\n      });\n    }\n\n    return combineReducers(_objectSpread({}, defaultReducers, asyncReducers))(state, action);\n  };\n};\n\nvar createAppropriateStore = process.env.NODE_ENV === 'development' ? console.tron.createStore : createStore;\nvar reduxStore = createAppropriateStore(createRootReducerWithSugar(), applyMiddleware(thunk));\nreduxStore.asyncReducers = {};\n\nvar registerLazyReducer = function registerLazyReducer(name, reducer) {\n  if (!reduxStore.asyncReducers[name]) {\n    console.debug(\"Registering Lazy Reducer \".concat(name, \" ...\"));\n    reduxStore.asyncReducers[name] = reducer;\n    reduxStore.replaceReducer(createRootReducerWithSugar(reduxStore.asyncReducers));\n    console.debug(\"Lazy Reducer \".concat(name, \" registered!\"));\n  }\n};\n\nexport default {\n  store: reduxStore,\n  getState: reduxStore.getState,\n  dispatch: reduxStore.dispatch,\n  registerLazyReducer: registerLazyReducer\n};","map":{"version":3,"sources":["/Users/brunogomes/desafio/frontend/principal/src/common/redux/ReduxStore.js"],"names":["applyMiddleware","combineReducers","createStore","thunk","CommonReducer","CLEAR_REDUCER_INFO","AuthReducer","defaultReducers","common","auth","createRootReducerWithSugar","asyncReducers","state","action","type","Array","isArray","dataTarget","forEach","field","reducer","cleanValue","createAppropriateStore","process","env","NODE_ENV","console","tron","reduxStore","registerLazyReducer","name","debug","replaceReducer","store","getState","dispatch"],"mappings":";AAAA,SAAQA,eAAR,EAAyBC,eAAzB,EAA0CC,WAA1C,QAA4D,OAA5D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAAQC,kBAAR,QAAiC,WAAjC;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,IAAMC,eAAe,GAAG;AACvBC,EAAAA,MAAM,EAAEJ,aADe;AAEvBK,EAAAA,IAAI,EAAEH;AAFiB,CAAxB;;AAKA,IAAMI,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAwB;AAAA,MAAvBC,aAAuB,uEAAP,EAAO;AAC1D,SAAO,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACzB,QAAIA,MAAM,CAACC,IAAP,KAAgBT,kBAApB,EAAwC;AACvCO,MAAAA,KAAK,qBAAOA,KAAP,CAAL;AAEA,UAAI,CAACG,KAAK,CAACC,OAAN,CAAcH,MAAM,CAACI,UAArB,CAAL,EACCJ,MAAM,CAACI,UAAP,GAAoB,CAACJ,MAAM,CAACI,UAAR,CAApB;AAEDJ,MAAAA,MAAM,CAACI,UAAP,CAAkBC,OAAlB,CAA0B,UAAAC,KAAK,EAAI;AAClCP,QAAAA,KAAK,CAACC,MAAM,CAACO,OAAR,CAAL,CAAsBD,KAAtB,IAA+BN,MAAM,CAACQ,UAAtC;AACA,OAFD;AAGA;;AAED,WAAOpB,eAAe,mBAAKM,eAAL,EAAyBI,aAAzB,EAAf,CAAwDC,KAAxD,EAA+DC,MAA/D,CAAP;AACA,GAbD;AAcA,CAfD;;AAiBA,IAAMS,sBAAsB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCC,OAAO,CAACC,IAAR,CAAazB,WAAtD,GAAoEA,WAAnG;AACA,IAAM0B,UAAU,GAAGN,sBAAsB,CAACZ,0BAA0B,EAA3B,EAA+BV,eAAe,CAACG,KAAD,CAA9C,CAAzC;AACAyB,UAAU,CAACjB,aAAX,GAA2B,EAA3B;;AAEA,IAAMkB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAOV,OAAP,EAAmB;AAC9C,MAAI,CAACQ,UAAU,CAACjB,aAAX,CAAyBmB,IAAzB,CAAL,EAAqC;AACpCJ,IAAAA,OAAO,CAACK,KAAR,oCAA0CD,IAA1C;AACAF,IAAAA,UAAU,CAACjB,aAAX,CAAyBmB,IAAzB,IAAiCV,OAAjC;AACAQ,IAAAA,UAAU,CAACI,cAAX,CAA0BtB,0BAA0B,CAACkB,UAAU,CAACjB,aAAZ,CAApD;AACAe,IAAAA,OAAO,CAACK,KAAR,wBAA8BD,IAA9B;AACA;AACD,CAPD;;AAUA,eAAe;AACdG,EAAAA,KAAK,EAAEL,UADO;AAEdM,EAAAA,QAAQ,EAAEN,UAAU,CAACM,QAFP;AAGdC,EAAAA,QAAQ,EAAEP,UAAU,CAACO,QAHP;AAIdN,EAAAA,mBAAmB,EAAnBA;AAJc,CAAf","sourcesContent":["import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport CommonReducer from \"./CommonReducer\";\nimport {CLEAR_REDUCER_INFO} from \"./RATypes\";\nimport AuthReducer from \"../../views/auth/AuthReducer\";\n\nconst defaultReducers = {\n\tcommon: CommonReducer,\n\tauth: AuthReducer,\n};\n\nconst createRootReducerWithSugar = (asyncReducers = {}) => {\n\treturn (state, action) => {\n\t\tif (action.type === CLEAR_REDUCER_INFO) {\n\t\t\tstate = {...state};\n\n\t\t\tif (!Array.isArray(action.dataTarget))\n\t\t\t\taction.dataTarget = [action.dataTarget];\n\n\t\t\taction.dataTarget.forEach(field => {\n\t\t\t\tstate[action.reducer][field] = action.cleanValue;\n\t\t\t});\n\t\t}\n\n\t\treturn combineReducers({...defaultReducers, ...asyncReducers})(state, action);\n\t};\n};\n\nconst createAppropriateStore = process.env.NODE_ENV === 'development' ? console.tron.createStore : createStore;\nconst reduxStore = createAppropriateStore(createRootReducerWithSugar(), applyMiddleware(thunk));\nreduxStore.asyncReducers = {};\n\nconst registerLazyReducer = (name, reducer) => {\n\tif (!reduxStore.asyncReducers[name]) {\n\t\tconsole.debug(`Registering Lazy Reducer ${name} ...`);\n\t\treduxStore.asyncReducers[name] = reducer;\n\t\treduxStore.replaceReducer(createRootReducerWithSugar(reduxStore.asyncReducers));\n\t\tconsole.debug(`Lazy Reducer ${name} registered!`);\n\t}\n};\n\n\nexport default {\n\tstore: reduxStore,\n\tgetState: reduxStore.getState,\n\tdispatch: reduxStore.dispatch,\n\tregisterLazyReducer\n};"]},"metadata":{},"sourceType":"module"}