{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _BaseRATypes = require(\"./BaseRATypes\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? Object(arguments[i]) : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar asyncStart = function asyncStart(subtype, httpRequest) {\n  if (subtype === void 0) {\n    subtype = \"EMPTY\";\n  }\n\n  if (httpRequest === void 0) {\n    httpRequest = null;\n  }\n\n  return {\n    type: _BaseRATypes.ASYNC_START,\n    subtype: subtype,\n    httpRequest: httpRequest\n  };\n};\n\nvar asyncEnd = function asyncEnd(subtype) {\n  if (subtype === void 0) {\n    subtype = \"EMPTY\";\n  }\n\n  return {\n    type: _BaseRATypes.ASYNC_END,\n    subtype: subtype\n  };\n};\n/**\n * Base Async Thunk for common use of async redux actions! ;D\n * @param restApiRequest - The promise returned by the Rest API Path Call\n * @param actionType - Then Redux Action Type to hit Reducer\n * @param customResponseTransform - Transform Response body results\n * @returns Function Thunk\n * rodrix\n */\n\n\nvar baseAsyncThunk = function baseAsyncThunk(restApiRequest, actionType, customResponseTransform) {\n  if (customResponseTransform === void 0) {\n    customResponseTransform = function customResponseTransform(res) {\n      return res.body;\n    };\n  }\n\n  return function (dispatch) {\n    dispatch(asyncStart(actionType, restApiRequest));\n    var hasError = false;\n    restApiRequest.then(function (res) {\n      hasError = res && !res.body && !res.status.toString().startsWith(\"20\");\n\n      if (!hasError) {\n        var body = res.body ? res.body : null;\n        dispatch({\n          type: actionType,\n          result: customResponseTransform(res, body, hasError)\n        });\n      }\n\n      return res;\n    }).catch(function (resErr) {\n      hasError = true;\n      var body = resErr.response && resErr.response.body ? resErr.response.body : null;\n      dispatch({\n        type: actionType,\n        result: _objectSpread({\n          hasError: hasError,\n          status: resErr.response ? resErr.response.statusCode : 0\n        }, customResponseTransform(resErr, body, hasError))\n      });\n\n      if (resErr) {\n        if (resErr.response && resErr.response.req) {\n          console.debug(\"baseAsyncThunk XHR: ERROR OCCURRED CALLING >>>> \" + resErr.response.req.url, {\n            request: {\n              method: resErr.response.req.method,\n              url: resErr.response.req.url,\n              data: resErr.response.req.data // headers: JSON.parse(JSON.stringify(resErr.response.req)).headers,\n\n            },\n            response: {\n              body: resErr.response.body,\n              // headers: resErr.response.headers,\n              code: resErr.response.statusCode\n            }\n          });\n        } else {\n          console.debug(resErr, JSON.stringify(resErr));\n        }\n      }\n\n      return resErr;\n    }).finally(function () {\n      dispatch(asyncEnd(actionType));\n    });\n  };\n};\n\nvar _default = {\n  asyncStart: asyncStart,\n  asyncEnd: asyncEnd,\n  baseAsyncThunk: baseAsyncThunk\n};\nexports.default = _default;","map":{"version":3,"sources":["../../../src/misc/redux/BaseActions.js"],"names":["asyncStart","subtype","httpRequest","type","ASYNC_START","asyncEnd","ASYNC_END","baseAsyncThunk","customResponseTransform","res","dispatch","hasError","restApiRequest","body","result","resErr","status","console","request","method","url","data","response","code","statusCode","JSON"],"mappings":"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","sourcesContent":["import {ASYNC_END, ASYNC_START} from './BaseRATypes'\n\nlet asyncStart = (subtype = \"EMPTY\", httpRequest = null) => ({\n\ttype: ASYNC_START,\n\tsubtype,\n\thttpRequest\n});\n\nlet asyncEnd = (subtype = \"EMPTY\") => ({\n\ttype: ASYNC_END,\n\tsubtype,\n});\n\n/**\n * Base Async Thunk for common use of async redux actions! ;D\n * @param restApiRequest - The promise returned by the Rest API Path Call\n * @param actionType - Then Redux Action Type to hit Reducer\n * @param customResponseTransform - Transform Response body results\n * @returns Function Thunk\n * rodrix\n */\nlet baseAsyncThunk = (restApiRequest, actionType, customResponseTransform = res => res.body) => dispatch => {\n\tdispatch(asyncStart(actionType, restApiRequest));\n\n\tlet hasError = false;\n\trestApiRequest\n\t\t.then(res => {\n\t\t\thasError = res && !res.body && !res.status.toString().startsWith(\"20\");\n\n\t\t\tif (!hasError) {\n\t\t\t\tlet body = res.body ? res.body : null;\n\t\t\t\tdispatch({type: actionType, result: customResponseTransform(res, body, hasError)});\n\t\t\t}\n\n\t\t\treturn res;\n\t\t})\n\t\t.catch(resErr => {\n\t\t\thasError = true;\n\n\t\t\tlet body = resErr.response && resErr.response.body ? resErr.response.body : null;\n\n\t\t\tdispatch({\n\t\t\t\ttype: actionType,\n\t\t\t\tresult: {\n\t\t\t\t\thasError,\n\t\t\t\t\tstatus: resErr.response ? resErr.response.statusCode : 0,\n\t\t\t\t\t...customResponseTransform(resErr, body, hasError),\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (resErr) {\n\t\t\t\tif (resErr.response && resErr.response.req) {\n\t\t\t\t\tconsole.debug(`baseAsyncThunk XHR: ERROR OCCURRED CALLING >>>> ${resErr.response.req.url}`, {\n\t\t\t\t\t\trequest: {\n\t\t\t\t\t\t\tmethod: resErr.response.req.method,\n\t\t\t\t\t\t\turl: resErr.response.req.url,\n\t\t\t\t\t\t\tdata: resErr.response.req.data,\n\t\t\t\t\t\t\t// headers: JSON.parse(JSON.stringify(resErr.response.req)).headers,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresponse: {\n\t\t\t\t\t\t\tbody: resErr.response.body,\n\t\t\t\t\t\t\t// headers: resErr.response.headers,\n\t\t\t\t\t\t\tcode: resErr.response.statusCode,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.debug(resErr, JSON.stringify(resErr));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn resErr;\n\t\t})\n\t\t.finally(() => {\n\t\t\tdispatch(asyncEnd(actionType));\n\t\t});\n};\n\nexport default {\n\tasyncStart,\n\tasyncEnd,\n\tbaseAsyncThunk,\n}\n"]},"metadata":{},"sourceType":"module"}