{"ast":null,"code":"import _objectSpread from \"/Users/brunogomes/desafio/frontend/principal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ASYNC_END, ASYNC_START } from './RATypes';\n\nvar asyncStart = function asyncStart() {\n  var subtype = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"EMPTY\";\n  var httpRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: ASYNC_START,\n    subtype: subtype,\n    httpRequest: httpRequest\n  };\n};\n\nvar asyncEnd = function asyncEnd() {\n  var subtype = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"EMPTY\";\n  return {\n    type: ASYNC_END,\n    subtype: subtype\n  };\n};\n/**\n * Base Async Thunk for common use of async redux actions! ;D\n * @param restApiRequest - The promise returned by the Rest API Path Call\n * @param actionType - Then Redux Action Type to hit Reducer\n * @param customResponseTransform - Transform Response body results\n * @returns Function Thunk\n * rodrix\n */\n\n\nvar baseAsyncThunk = function baseAsyncThunk(restApiRequest, actionType) {\n  var customResponseTransform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (res) {\n    return res.body;\n  };\n  return function (dispatch) {\n    dispatch(asyncStart(actionType, restApiRequest));\n    var hasError = false;\n    restApiRequest.then(function (res) {\n      hasError = res && !res.body && !res.status.toString().startsWith(\"20\");\n      if (!hasError) dispatch({\n        type: actionType,\n        data: customResponseTransform(res, hasError)\n      });\n      return res;\n    }).catch(function (err) {\n      hasError = true;\n      dispatch({\n        type: actionType,\n        errorData: _objectSpread({}, customResponseTransform(err, hasError), {\n          status: err.response ? err.response.statusCode : 0,\n          hasError: hasError\n        })\n      });\n\n      if (err) {\n        if (err.response && err.response.req) {\n          console.debug(\"baseAsyncThunk XHR: ERROR OCCURRED CALLING >>>> \".concat(err.response.req.url), {\n            request: {\n              method: err.response.req.method,\n              url: err.response.req.url,\n              data: err.response.req.data // headers: JSON.parse(JSON.stringify(err.response.req)).headers,\n\n            },\n            response: {\n              body: err.response.body,\n              // headers: err.response.headers,\n              code: err.response.statusCode\n            }\n          });\n        } else {\n          console.debug(err, JSON.stringify(err));\n        }\n      }\n\n      return err;\n    }).finally(function () {\n      dispatch(asyncEnd(actionType));\n    });\n  };\n};\n\nexport default {\n  asyncStart: asyncStart,\n  asyncEnd: asyncEnd,\n  baseAsyncThunk: baseAsyncThunk\n};","map":{"version":3,"sources":["/Users/brunogomes/desafio/frontend/principal/src/common/redux/CommonActions.js"],"names":["ASYNC_END","ASYNC_START","asyncStart","subtype","httpRequest","type","asyncEnd","baseAsyncThunk","restApiRequest","actionType","customResponseTransform","res","body","dispatch","hasError","then","status","toString","startsWith","data","catch","err","errorData","response","statusCode","req","console","debug","url","request","method","code","JSON","stringify","finally"],"mappings":"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","sourcesContent":["import {ASYNC_END, ASYNC_START} from './RATypes'\n\nlet asyncStart = (subtype = \"EMPTY\", httpRequest = null) => ({\n\ttype: ASYNC_START,\n\tsubtype,\n\thttpRequest\n});\n\nlet asyncEnd = (subtype = \"EMPTY\") => ({\n\ttype: ASYNC_END,\n\tsubtype,\n});\n\n/**\n * Base Async Thunk for common use of async redux actions! ;D\n * @param restApiRequest - The promise returned by the Rest API Path Call\n * @param actionType - Then Redux Action Type to hit Reducer\n * @param customResponseTransform - Transform Response body results\n * @returns Function Thunk\n * rodrix\n */\nlet baseAsyncThunk = (restApiRequest, actionType, customResponseTransform = res => res.body) => dispatch => {\n\tdispatch(asyncStart(actionType, restApiRequest));\n\n\tlet hasError = false;\n\trestApiRequest\n\t\t.then(res => {\n\t\t\thasError = res && !res.body && !res.status.toString().startsWith(\"20\");\n\n\t\t\tif (!hasError)\n\t\t\t\tdispatch({type: actionType, data: customResponseTransform(res, hasError)});\n\n\t\t\treturn res;\n\t\t})\n\t\t.catch((err) => {\n\t\t\thasError = true;\n\n\t\t\tdispatch({\n\t\t\t\ttype: actionType,\n\t\t\t\terrorData: {\n\t\t\t\t\t...customResponseTransform(err, hasError),\n\t\t\t\t\tstatus: err.response ? err.response.statusCode : 0,\n\t\t\t\t\thasError\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (err) {\n\t\t\t\tif (err.response && err.response.req) {\n\t\t\t\t\tconsole.debug(`baseAsyncThunk XHR: ERROR OCCURRED CALLING >>>> ${err.response.req.url}`, {\n\t\t\t\t\t\trequest: {\n\t\t\t\t\t\t\tmethod: err.response.req.method,\n\t\t\t\t\t\t\turl: err.response.req.url,\n\t\t\t\t\t\t\tdata: err.response.req.data,\n\t\t\t\t\t\t\t// headers: JSON.parse(JSON.stringify(err.response.req)).headers,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresponse: {\n\t\t\t\t\t\t\tbody: err.response.body,\n\t\t\t\t\t\t\t// headers: err.response.headers,\n\t\t\t\t\t\t\tcode: err.response.statusCode,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.debug(err, JSON.stringify(err));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn err;\n\t\t})\n\t\t.finally(() => {\n\t\t\tdispatch(asyncEnd(actionType));\n\t\t});\n};\n\n\nexport default {\n\tasyncStart,\n\tasyncEnd,\n\tbaseAsyncThunk,\n}"]},"metadata":{},"sourceType":"module"}