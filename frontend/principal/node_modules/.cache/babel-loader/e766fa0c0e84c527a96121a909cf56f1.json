{"ast":null,"code":"import _defineProperty from \"/Users/brunogomes/desafio/frontend/principal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\n/**\n * Generate a UUID\n * @param withSeparator bolean\n * @returns {string}\n */\nfunction uuid() {\n  var withSeparator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var sep = withSeparator ? '-' : '';\n  var uuid = '';\n\n  for (var i = 0; i < 8; i++) {\n    uuid += Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1) + (i < 7 ? sep : \"\");\n  }\n\n  return uuid;\n}\n/**\n * Generate a half size UUID\n * @param withSeparator bolean\n * @returns {string}\n */\n\n\nfunction halfUuid(withSeparator) {\n  var uuid = this.uuid(withSeparator);\n  return uuid.substring(0, uuid.length / 2);\n}\n/**\n * Encode object json to url parameters\n *\n * @param      {Object} json The object needs to encode as url parameters;\n * @param      {Object} complete If string must be returned with \"?\", complete should be true;\n */\n\n\nfunction jsonToQueryString() {\n  var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var complete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var str = '';\n\n  for (var key in json) {\n    if (!isEmpty(json[key]) && !isEmpty(str)) str += '&';\n    if (!isEmpty(json[key])) str += \"\".concat(key, \"=\").concat(encodeURIComponent(json[key]));\n  }\n\n  if (complete && str.length > 0) str = \"?\" + str;\n  return str;\n}\n/**\n * Test if a given value is empty or empty like.\n *\n * @param value: Value to bem asserted\n * @param zeroIsEmpty: In case of numbers, check if zeros are considered null/empty.\n * @returns boolean: true if is empty, false if donÂ´t;\n */\n\n\nfunction isEmpty(value) {\n  var zeroIsEmpty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (typeof zeroIsEmpty !== \"boolean\") throw new Error(\"zeroIsEmpty must be boolean\");\n\n  switch (Object.prototype.toString.call(value)) {\n    case '[object Undefined]':\n    case '[object Null]':\n      return true;\n\n    case '[object String]':\n      if (value.trim().length === 0 || value.trim().toLowerCase() === 'undefined' || value.trim().toLowerCase() === 'null' || value.trim().toLowerCase() === 'empty' || value.safeContains(\"R$\") && value.brazilianRealToFloat() === 0 && zeroIsEmpty) return true;\n      break;\n\n    case '[object Number]':\n      if (zeroIsEmpty && value === 0) return true;\n      break;\n\n    case '[object Object]':\n      if (Object.keys(value).length === 0) return true;\n      break;\n\n    case '[object Array]':\n      if (value.length === 0) return true;\n      break;\n\n    default:\n      return false;\n  }\n\n  return false;\n}\n/**\n * Check is desired param is a true JSON object\n * @param param\n * @returns {boolean}\n */\n\n\nfunction isJson(param) {\n  return Object.prototype.toString.call(param) === '[object Object]';\n}\n/**\n * Generate a random color\n */\n\n\nvar generateRandomColor = function () {\n  var randomInt = function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  return function () {\n    var h = randomInt(0, 360);\n    var s = randomInt(42, 98);\n    var l = randomInt(40, 90);\n    return \"hsl(\".concat(h, \",\").concat(s, \"%,\").concat(l, \"%)\");\n  };\n}();\n/**\n * Generate a paged array based on a base array informed\n */\n\n\nfunction generatePagedArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var currentPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var pageSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n  var first = currentPage === 0 ? 0 : currentPage * pageSize;\n  var last;\n  if (currentPage === 0) {\n    if (pageSize > array.length) last = array.length;else last = pageSize;\n  } else if ((currentPage + 1) * pageSize > array.length) last = array.length;else last = (currentPage + 1) * pageSize;\n  return {\n    first: currentPage === 0,\n    last: currentPage === Math.ceil(array.length / pageSize) - 1,\n    totalPages: Math.ceil(array.length / pageSize),\n    totalElements: array.length,\n    size: pageSize,\n    content: array.slice(first, last)\n  };\n}\n/**\n * Iterate over JSON structure and join keys and values in a single string, like:\n * E.G:\n *      JSON Input: {KEY:VALUE, KEY2:VALUE2}\n *\n *      -\n *\n *      String Output:\n *\n *      KEY:\\n\n *      VALUE\\n\\n\n *\n *      KEY2:\\n\n *      VALUE2\\n\\n\n *      ...\n *\n * and so on.\n *\n * If keys are translatable, needs to pass a second function parameter of REACT translator instance, cause utils is outside of react domain.\n */\n\n\nfunction jsonToSpecificPlainText(json, translator) {\n  if (json) {\n    var translate = function translate(k) {\n      return translator ? translator(k) : k;\n    };\n\n    var string = \"\";\n\n    for (var k in json) {\n      if (json.hasOwnProperty(k) && !isEmpty(json[k])) string += translate(k) + \":\\n\" + json[k] + \"\\n\\n\";\n    }\n\n    return string;\n  }\n\n  return \"\";\n}\n/**\n *  Deep Merge JSON objects.\n *\n *  E.g:\n *\n *  let a = {testA: {test1: '1', test2: '1'}};\n *  let b = {testA: {test2: '2', test3: '3'}};\n *\n *  utils.deepJsonMerge(a, b); //{test1: '1', test2: '2', test3: '3'}};\n *\n * @param target - let a = {testA: {test1: '1', test2: '1'}};\n * @param source - let b = {testA: {test2: '2', test3: '3'}};\n * @returns Deep Merged Json - {test1: '1', test2: '2', test3: '3'}};\n */\n\n\nfunction deepJsonMerge() {\n  var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var isObject = function isObject(item) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n  };\n\n  var output = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(function (key) {\n      if (isObject(source[key])) {\n        if (!(key in target)) Object.assign(output, _defineProperty({}, key, source[key]));else output[key] = deepJsonMerge(target[key], source[key]);\n      } else {\n        Object.assign(output, _defineProperty({}, key, source[key]));\n      }\n    });\n  }\n\n  return output;\n}\n/**\n * Check if given Json has entire path of keys.\n *\n * E.g:\n * Consider:\n * let json = {level1: {level2: {level3: {level4: \"hi nigga\"}}}};\n *\n * Common undefined check can be:\n *\n * json.level1 && json.level1.level2 && json.level1.level2.level3 && json.level1.level2.level3.level4; //true\n * json.level1 && json.level1.level2 && json.level1.level2.level3 && json.level1.level2.level3.levelXYZ; //false\n *\n * With Json Has Path:\n *\n * utils.jsonHasPath(json, \"level1.level2.level3.level4\"); //true\n * utils.jsonHasPath(json, \"level1.level2.level3.levelXYZ\"); //false\n *\n * @param json - Desired json to check. Sample: let json = {level1: {level2: {level3: {level4: \"hi nigga\"}}}};\n * @param path - Desired path to check. Must follow this sample: \"level1.level2.level3.level4\"\n * @returns {boolean} - True if path is valid, false otherwise\n */\n\n\nfunction jsonHasPath() {\n  var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var args = path.split(\".\");\n\n  for (var i = 0; i < args.length; i++) {\n    if (!json || !json.hasOwnProperty(args[i])) return false;\n    json = json[args[i]];\n  }\n\n  return true;\n}\n/**\n * Escape html content\n * @param string\n * @returns Escaped html\n */\n\n\nvar stripHTML = function stripHTML(string) {\n  return string.replace(/<(?:.|\\n)*?>/gm, '');\n};\n\nexport default {\n  uuid: uuid,\n  halfUuid: halfUuid,\n  jsonToQueryString: jsonToQueryString,\n  isEmpty: isEmpty,\n  isJson: isJson,\n  generateRandomColor: generateRandomColor,\n  generatePagedArray: generatePagedArray,\n  jsonToSpecificPlainText: jsonToSpecificPlainText,\n  deepJsonMerge: deepJsonMerge,\n  jsonHasPath: jsonHasPath,\n  stripHTML: stripHTML\n};","map":{"version":3,"sources":["/Users/brunogomes/desafio/frontend/principal/src/common/Utils.js"],"names":["uuid","withSeparator","sep","i","Math","floor","random","toString","substring","halfUuid","length","jsonToQueryString","json","complete","str","key","isEmpty","encodeURIComponent","value","zeroIsEmpty","Error","Object","prototype","call","trim","toLowerCase","safeContains","brazilianRealToFloat","keys","isJson","param","generateRandomColor","randomInt","min","max","h","s","l","generatePagedArray","array","currentPage","pageSize","first","last","ceil","totalPages","totalElements","size","content","slice","jsonToSpecificPlainText","translator","translate","k","string","hasOwnProperty","deepJsonMerge","target","source","isObject","item","Array","isArray","output","assign","forEach","jsonHasPath","path","args","split","stripHTML","replace"],"mappings":"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","sourcesContent":["/**\n * Generate a UUID\n * @param withSeparator bolean\n * @returns {string}\n */\nfunction uuid(withSeparator = true) {\n\tlet sep = withSeparator ? '-' : '';\n\tlet uuid = '';\n\n\tfor (let i = 0; i < 8; i++)\n\t\tuuid += Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1) + (i < 7 ? sep : \"\");\n\n\treturn uuid;\n}\n\n\n/**\n * Generate a half size UUID\n * @param withSeparator bolean\n * @returns {string}\n */\nfunction halfUuid(withSeparator) {\n\tlet uuid = this.uuid(withSeparator);\n\treturn uuid.substring(0, uuid.length / 2);\n}\n\n\n/**\n * Encode object json to url parameters\n *\n * @param      {Object} json The object needs to encode as url parameters;\n * @param      {Object} complete If string must be returned with \"?\", complete should be true;\n */\nfunction jsonToQueryString(json = {}, complete = false) {\n\tlet str = '';\n\tfor (const key in json) {\n\t\tif (!isEmpty(json[key]) && !isEmpty(str))\n\t\t\tstr += '&';\n\n\t\tif (!isEmpty(json[key]))\n\t\t\tstr += `${key}=${encodeURIComponent(json[key])}`;\n\t}\n\n\tif (complete && str.length > 0)\n\t\tstr = \"?\" + str;\n\n\treturn str;\n}\n\n\n/**\n * Test if a given value is empty or empty like.\n *\n * @param value: Value to bem asserted\n * @param zeroIsEmpty: In case of numbers, check if zeros are considered null/empty.\n * @returns boolean: true if is empty, false if donÂ´t;\n */\nfunction isEmpty(value, zeroIsEmpty = false) {\n\tif (typeof zeroIsEmpty !== \"boolean\")\n\t\tthrow new Error(\"zeroIsEmpty must be boolean\");\n\n\tswitch (Object.prototype.toString.call(value)) {\n\t\tcase '[object Undefined]':\n\t\tcase '[object Null]':\n\t\t\treturn true;\n\n\t\tcase '[object String]':\n\t\t\tif (value.trim().length === 0\n\t\t\t\t|| value.trim().toLowerCase() === 'undefined'\n\t\t\t\t|| value.trim().toLowerCase() === 'null'\n\t\t\t\t|| value.trim().toLowerCase() === 'empty'\n\t\t\t\t|| (value.safeContains(\"R$\") && value.brazilianRealToFloat() === 0 && zeroIsEmpty))\n\t\t\t\treturn true;\n\t\t\tbreak;\n\n\t\tcase '[object Number]':\n\t\t\tif (zeroIsEmpty && value === 0)\n\t\t\t\treturn true;\n\t\t\tbreak;\n\n\t\tcase '[object Object]':\n\t\t\tif (Object.keys(value).length === 0)\n\t\t\t\treturn true;\n\t\t\tbreak;\n\n\t\tcase '[object Array]':\n\t\t\tif (value.length === 0)\n\t\t\t\treturn true;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\treturn false;\n\t}\n\n\treturn false;\n}\n\n/**\n * Check is desired param is a true JSON object\n * @param param\n * @returns {boolean}\n */\nfunction isJson(param) {\n\treturn Object.prototype.toString.call(param) === '[object Object]';\n}\n\n\n/**\n * Generate a random color\n */\n\nconst generateRandomColor = (() => {\n\tconst randomInt = (min, max) => {\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n\t};\n\n\treturn () => {\n\t\tlet h = randomInt(0, 360);\n\t\tlet s = randomInt(42, 98);\n\t\tlet l = randomInt(40, 90);\n\t\treturn `hsl(${h},${s}%,${l}%)`;\n\t};\n})();\n\n\n/**\n * Generate a paged array based on a base array informed\n */\nfunction generatePagedArray(array = [], currentPage = 0, pageSize = 5) {\n\tlet first = currentPage === 0\n\t\t? 0\n\t\t: currentPage * pageSize;\n\n\tlet last;\n\n\tif (currentPage === 0)\n\t\tif (pageSize > array.length)\n\t\t\tlast = array.length;\n\t\telse\n\t\t\tlast = pageSize;\n\n\telse if (((currentPage + 1) * pageSize) > array.length)\n\t\tlast = array.length;\n\n\telse\n\t\tlast = ((currentPage + 1) * pageSize);\n\n\treturn {\n\t\tfirst: currentPage === 0,\n\t\tlast: currentPage === Math.ceil(array.length / pageSize) - 1,\n\t\ttotalPages: Math.ceil(array.length / pageSize),\n\t\ttotalElements: array.length,\n\t\tsize: pageSize,\n\t\tcontent: array.slice(first, last)\n\t}\n}\n\n\n/**\n * Iterate over JSON structure and join keys and values in a single string, like:\n * E.G:\n *      JSON Input: {KEY:VALUE, KEY2:VALUE2}\n *\n *      -\n *\n *      String Output:\n *\n *      KEY:\\n\n *      VALUE\\n\\n\n *\n *      KEY2:\\n\n *      VALUE2\\n\\n\n *      ...\n *\n * and so on.\n *\n * If keys are translatable, needs to pass a second function parameter of REACT translator instance, cause utils is outside of react domain.\n */\nfunction jsonToSpecificPlainText(json, translator) {\n\tif (json) {\n\t\tlet translate = (k) => translator ? translator(k) : k;\n\t\tlet string = \"\";\n\n\t\tfor (let k in json)\n\t\t\tif (json.hasOwnProperty(k) && !isEmpty(json[k]))\n\t\t\t\tstring += translate(k) + \":\\n\" + json[k] + \"\\n\\n\";\n\n\t\treturn string;\n\t}\n\n\treturn \"\";\n}\n\n/**\n *  Deep Merge JSON objects.\n *\n *  E.g:\n *\n *  let a = {testA: {test1: '1', test2: '1'}};\n *  let b = {testA: {test2: '2', test3: '3'}};\n *\n *  utils.deepJsonMerge(a, b); //{test1: '1', test2: '2', test3: '3'}};\n *\n * @param target - let a = {testA: {test1: '1', test2: '1'}};\n * @param source - let b = {testA: {test2: '2', test3: '3'}};\n * @returns Deep Merged Json - {test1: '1', test2: '2', test3: '3'}};\n */\nfunction deepJsonMerge(target = {}, source = {}) {\n\tlet isObject = item => (item && typeof item === 'object' && !Array.isArray(item));\n\tlet output = Object.assign({}, target);\n\n\tif (isObject(target) && isObject(source)) {\n\t\tObject.keys(source).forEach(key => {\n\t\t\tif (isObject(source[key])) {\n\t\t\t\tif (!(key in target))\n\t\t\t\t\tObject.assign(output, {[key]: source[key]});\n\t\t\t\telse\n\t\t\t\t\toutput[key] = deepJsonMerge(target[key], source[key]);\n\t\t\t} else {\n\t\t\t\tObject.assign(output, {[key]: source[key]});\n\t\t\t}\n\t\t});\n\t}\n\n\treturn output;\n}\n\n\n/**\n * Check if given Json has entire path of keys.\n *\n * E.g:\n * Consider:\n * let json = {level1: {level2: {level3: {level4: \"hi nigga\"}}}};\n *\n * Common undefined check can be:\n *\n * json.level1 && json.level1.level2 && json.level1.level2.level3 && json.level1.level2.level3.level4; //true\n * json.level1 && json.level1.level2 && json.level1.level2.level3 && json.level1.level2.level3.levelXYZ; //false\n *\n * With Json Has Path:\n *\n * utils.jsonHasPath(json, \"level1.level2.level3.level4\"); //true\n * utils.jsonHasPath(json, \"level1.level2.level3.levelXYZ\"); //false\n *\n * @param json - Desired json to check. Sample: let json = {level1: {level2: {level3: {level4: \"hi nigga\"}}}};\n * @param path - Desired path to check. Must follow this sample: \"level1.level2.level3.level4\"\n * @returns {boolean} - True if path is valid, false otherwise\n */\nfunction jsonHasPath(json = {}, path = \"\") {\n\tlet args = path.split(\".\");\n\n\tfor (let i = 0; i < args.length; i++) {\n\t\tif (!json || !json.hasOwnProperty(args[i]))\n\t\t\treturn false;\n\n\t\tjson = json[args[i]];\n\t}\n\n\treturn true;\n}\n\n\n/**\n * Escape html content\n * @param string\n * @returns Escaped html\n */\nlet stripHTML = (string) => string.replace(/<(?:.|\\n)*?>/gm, '');\n\nexport default {\n\tuuid,\n\thalfUuid,\n\tjsonToQueryString,\n\tisEmpty,\n\tisJson,\n\tgenerateRandomColor,\n\tgeneratePagedArray,\n\tjsonToSpecificPlainText,\n\tdeepJsonMerge,\n\tjsonHasPath,\n\tstripHTML,\n}\n"]},"metadata":{},"sourceType":"module"}