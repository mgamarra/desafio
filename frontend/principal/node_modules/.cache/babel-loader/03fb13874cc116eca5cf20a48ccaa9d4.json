{"ast":null,"code":"import CommonActions from \"../../common/redux/CommonActions\";\nimport { LOGIN, LOGOUT, REGISTER_NEW_USER } from \"../../common/redux/RATypes\";\nimport RestAPI from \"../../common/RestAPI\";\nimport SuperagentBackend from \"../../common/superagent/SuperagentBackend\";\nimport Notifications from \"../../common/ui/connected/Notifications/Notifications\";\n\nvar login = function login(loginData) {\n  return CommonActions.baseAsyncThunk(RestAPI.auth.login(loginData), LOGIN, function (res, hasError) {\n    if (hasError && res.response) {\n      Notifications.addNotification(res.response.body.messages);\n      return res.response.body;\n    } else if (res && res.body && res.body.data && res.body.data.token) {\n      SuperagentBackend.setToken(res.body.data.token);\n      sessionStorage.setItem(\"jwtToken\", res.body.data.token);\n      sessionStorage.setItem(\"user\", JSON.stringify(res.body.data.user));\n      return res.body.data;\n    }\n  });\n};\n\nvar logout = function logout() {\n  return function (dispatch) {\n    SuperagentBackend.setToken(undefined);\n    sessionStorage.clear();\n    dispatch({\n      type: LOGOUT\n    });\n  };\n};\n\nvar register = function register(data) {\n  return CommonActions.baseAsyncThunk(RestAPI.auth.register(data), REGISTER_NEW_USER, function (res, hasError) {\n    if (hasError && res.response) {\n      Notifications.addNotification(res.response.body.messages);\n      return res.response.body;\n    } else if (res && res.body && res.body.messages) {\n      Notifications.addNotification(res.body.messages);\n      return {\n        registeredSuccessfully: true\n      };\n    }\n  });\n};\n\nexport default {\n  login: login,\n  logout: logout,\n  register: register\n};","map":{"version":3,"sources":["/Users/brunogomes/desafio/frontend/principal/src/views/auth/AuthActions.js"],"names":["CommonActions","LOGIN","LOGOUT","REGISTER_NEW_USER","RestAPI","SuperagentBackend","Notifications","login","loginData","baseAsyncThunk","auth","res","hasError","response","addNotification","body","messages","data","token","setToken","sessionStorage","setItem","JSON","stringify","user","logout","dispatch","undefined","clear","type","register","registeredSuccessfully"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kCAA1B;AACA,SAAQC,KAAR,EAAeC,MAAf,EAAuBC,iBAAvB,QAA+C,4BAA/C;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,OAAOC,aAAP,MAA0B,uDAA1B;;AAEA,IAAIC,KAAK,GAAG,SAARA,KAAQ,CAACC,SAAD;AAAA,SAAeR,aAAa,CAACS,cAAd,CAC1BL,OAAO,CAACM,IAAR,CAAaH,KAAb,CAAmBC,SAAnB,CAD0B,EAE1BP,KAF0B,EAG1B,UAACU,GAAD,EAAMC,QAAN,EAAmB;AAClB,QAAIA,QAAQ,IAAID,GAAG,CAACE,QAApB,EAA8B;AAC7BP,MAAAA,aAAa,CAACQ,eAAd,CAA8BH,GAAG,CAACE,QAAJ,CAAaE,IAAb,CAAkBC,QAAhD;AAEA,aAAOL,GAAG,CAACE,QAAJ,CAAaE,IAApB;AACA,KAJD,MAIO,IAAIJ,GAAG,IAAIA,GAAG,CAACI,IAAX,IAAmBJ,GAAG,CAACI,IAAJ,CAASE,IAA5B,IAAoCN,GAAG,CAACI,IAAJ,CAASE,IAAT,CAAcC,KAAtD,EAA6D;AACnEb,MAAAA,iBAAiB,CAACc,QAAlB,CAA2BR,GAAG,CAACI,IAAJ,CAASE,IAAT,CAAcC,KAAzC;AAEAE,MAAAA,cAAc,CAACC,OAAf,CAAuB,UAAvB,EAAmCV,GAAG,CAACI,IAAJ,CAASE,IAAT,CAAcC,KAAjD;AACAE,MAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BC,IAAI,CAACC,SAAL,CAAeZ,GAAG,CAACI,IAAJ,CAASE,IAAT,CAAcO,IAA7B,CAA/B;AAEA,aAAOb,GAAG,CAACI,IAAJ,CAASE,IAAhB;AACA;AACD,GAhByB,CAAf;AAAA,CAAZ;;AAmBA,IAAIQ,MAAM,GAAG,SAATA,MAAS;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC9BrB,IAAAA,iBAAiB,CAACc,QAAlB,CAA2BQ,SAA3B;AACAP,IAAAA,cAAc,CAACQ,KAAf;AACAF,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAE3B;AAAP,KAAD,CAAR;AACA,GAJY;AAAA,CAAb;;AAMA,IAAI4B,QAAQ,GAAG,SAAXA,QAAW,CAACb,IAAD;AAAA,SAAUjB,aAAa,CAACS,cAAd,CACxBL,OAAO,CAACM,IAAR,CAAaoB,QAAb,CAAsBb,IAAtB,CADwB,EAExBd,iBAFwB,EAGxB,UAACQ,GAAD,EAAMC,QAAN,EAAmB;AAClB,QAAIA,QAAQ,IAAID,GAAG,CAACE,QAApB,EAA8B;AAC7BP,MAAAA,aAAa,CAACQ,eAAd,CAA8BH,GAAG,CAACE,QAAJ,CAAaE,IAAb,CAAkBC,QAAhD;AAEA,aAAOL,GAAG,CAACE,QAAJ,CAAaE,IAApB;AACA,KAJD,MAIO,IAAIJ,GAAG,IAAIA,GAAG,CAACI,IAAX,IAAmBJ,GAAG,CAACI,IAAJ,CAASC,QAAhC,EAA0C;AAChDV,MAAAA,aAAa,CAACQ,eAAd,CAA8BH,GAAG,CAACI,IAAJ,CAASC,QAAvC;AAEA,aAAO;AAACe,QAAAA,sBAAsB,EAAE;AAAzB,OAAP;AACA;AACD,GAbuB,CAAV;AAAA,CAAf;;AAeA,eAAe;AACdxB,EAAAA,KAAK,EAALA,KADc;AAEdkB,EAAAA,MAAM,EAANA,MAFc;AAGdK,EAAAA,QAAQ,EAARA;AAHc,CAAf","sourcesContent":["import CommonActions from \"../../common/redux/CommonActions\";\nimport {LOGIN, LOGOUT, REGISTER_NEW_USER} from \"../../common/redux/RATypes\";\nimport RestAPI from \"../../common/RestAPI\";\nimport SuperagentBackend from \"../../common/superagent/SuperagentBackend\";\nimport Notifications from \"../../common/ui/connected/Notifications/Notifications\";\n\nlet login = (loginData) => CommonActions.baseAsyncThunk(\n\tRestAPI.auth.login(loginData),\n\tLOGIN,\n\t(res, hasError) => {\n\t\tif (hasError && res.response) {\n\t\t\tNotifications.addNotification(res.response.body.messages);\n\n\t\t\treturn res.response.body;\n\t\t} else if (res && res.body && res.body.data && res.body.data.token) {\n\t\t\tSuperagentBackend.setToken(res.body.data.token);\n\n\t\t\tsessionStorage.setItem(\"jwtToken\", res.body.data.token);\n\t\t\tsessionStorage.setItem(\"user\", JSON.stringify(res.body.data.user));\n\n\t\t\treturn res.body.data;\n\t\t}\n\t});\n\n\nlet logout = () => dispatch => {\n\tSuperagentBackend.setToken(undefined);\n\tsessionStorage.clear();\n\tdispatch({type: LOGOUT})\n};\n\nlet register = (data) => CommonActions.baseAsyncThunk(\n\tRestAPI.auth.register(data),\n\tREGISTER_NEW_USER,\n\t(res, hasError) => {\n\t\tif (hasError && res.response) {\n\t\t\tNotifications.addNotification(res.response.body.messages);\n\n\t\t\treturn res.response.body;\n\t\t} else if (res && res.body && res.body.messages) {\n\t\t\tNotifications.addNotification(res.body.messages);\n\n\t\t\treturn {registeredSuccessfully: true};\n\t\t}\n\t});\n\nexport default {\n\tlogin,\n\tlogout,\n\tregister\n}"]},"metadata":{},"sourceType":"module"}