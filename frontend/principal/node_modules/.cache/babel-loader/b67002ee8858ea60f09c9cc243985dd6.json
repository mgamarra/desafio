{"ast":null,"code":"/**\n * PLUGINS, EXTENSIONS AND UTILS\n *\n * @AUTHOR RODRIGO\n */\n(function () {\n  console.debug(\"Applying JS extensions ...\"); // --- NUMBER EXTENSIONS\n\n  /**\n   * Plugin for formatting numberssafeContains\n   * Number.prototype.format(n, x, s, c)\n   *\n   * @param n: Decimal size, eg: 2\n   * @param x: Thousands or blocks size, eg: 3\n   * @param s: Delimiters of the thousands or blocks, eg: '.'\n   * @param c: Decimal delimiter, eg: ','\n   *\n   * Usage: Ex1: new Number(10000).format(2, 3, '.', ',');\n   *        Ex2: parseFloat(10000).format(2, 3, '.', ',');\n   *        Ex3: parseInt(10000).format(2, 3, '.', ',');\n   *\n   * @see Another approach is String.mask\n   */\n\n  if (!Number.prototype.format) Object.defineProperty(Number.prototype, \"format\", {\n    value: function value() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n      var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';\n      var c = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ',';\n      var re = '\\\\d(?=(\\\\d{' + (x || 3) + '})+' + (n > 0 ? '\\\\D' : '$') + ')';\n      var num = this.toFixed(Math.max(0, ~~n));\n      return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));\n    }\n  });\n  /**\n   * Plugin for formatting Brazilian Real numbers\n   *\n   * @param signed: Boolean true or false. If true or undefined, return que output number with 'R$' sign,\n   * if false, returns formatted number only.\n   *\n   * Usage: Ex1: new Number(10000).formatAsBRL();\n   *        Ex2: Number(10000.32).formatAsBRL();\n   */\n\n  if (!Number.prototype.formatAsBRL) Object.defineProperty(Number.prototype, \"formatAsBRL\", {\n    value: function value() {\n      var signed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return \"\".concat(signed ? \"R$ \" : '').concat(this.format());\n    }\n  }); // --- STRING EXTENSIONS\n\n  /**\n   * Plugin to extract numbers of Strings, returns a String containing only numbers and other escaped characters.\n   * @param s: Chars to scape, ex: -.,, _-, , -, _-\n   *\n   * Usage: Ex1: \"ABC123D-F*G\".onlyNumbers();\n   * Usage: Ex2: \"ABC123D-F*G\".onlyNumbers(\"D\");\n   * Usage: Ex3: \"ABC123D-F*G\".onlyNumbers(\"FG\");\n   * Usage: Ex4: \"ABC123D-F*G\".onlyNumbers(\"FG*-\");\n   * Usage: Ex5: \"ABC123D-F*G\".onlyNumbers(\"*-\");\n   */\n\n  if (!String.prototype.onlyNumbers) Object.defineProperty(String.prototype, \"onlyNumbers\", {\n    value: function value(s) {\n      var patternBase = \"[^0-9{*}]\";\n      if (s) patternBase = patternBase.replace(\"{*}\", s);else patternBase = patternBase.replace(\"{*}\", \"\");\n      return this.replace(new RegExp(patternBase, \"g\"), \"\");\n    }\n  });\n  /**\n   * Plugin to extract Alpha chars of Strings, returns a String containing only Alpha and other escaped characters.\n   * @param s: Chars to scape, ex: -.,, _-, , -, _-\n   *\n   * Usage: Ex1: \"ABC123D-F*G\".onlyAlpha();\n   * Usage: Ex2: \"ABC123D-F*G\".onlyAlpha(\"1\");\n   * Usage: Ex3: \"ABC123D-F*G\".onlyAlpha(\"23\");\n   * Usage: Ex4: \"ABC123D-F*G\".onlyAlpha(\"-\");\n   * Usage: Ex5: \"ABC123D-F*G\".onlyAlpha(\"*-\");\n   */\n\n  if (!String.prototype.onlyAlpha) Object.defineProperty(String.prototype, \"onlyAlpha\", {\n    value: function value(s) {\n      var patternBase = \"[^A-Za-z{*}]\";\n      if (s) patternBase = patternBase.replace(\"{*}\", s);else patternBase = patternBase.replace(\"{*}\", \"\");\n      return this.replace(new RegExp(patternBase, \"g\"), \"\");\n    }\n  });\n  /**\n   * Plugin to extract Alphanumeric chars of Strings, returns a String containing only Alphanumeric and other escaped characters.\n   * @param s: Chars to scape, ex: -.,, _-, , -, _-\n   *\n   * Usage: Ex1: \"ABC123D-F*G\".onlyAlphanumeric(); //ABC123DFG\n   * Usage: Ex2: \"ABC123D-F*G\".onlyAlphanumeric(\"*\"); //ABC123DF*G\n   */\n\n  if (!String.prototype.onlyAlphanumeric) Object.defineProperty(String.prototype, \"onlyAlphanumeric\", {\n    value: function value() {\n      var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      return this.replace(new RegExp(\"[^A-Za-z0-9\".concat(s, \"]\"), \"g\"), \"\");\n    }\n  });\n  /**\n   * Same of Alphanumeric, but don't allow number as first char of a String\n   * @param s: Chars to scape, ex: -.,, _-, , -, _-\n   *\n   * Usage: Ex1: \"098ABC123D-F*G\".onlyAlphanumeric(); //ABC123DFG\n   * Usage: Ex2: \"7-65ABC123D-F*G\".onlyAlphanumeric(\"*-\"); //-ABC123DF*G\n   */\n\n  if (!String.prototype.onlyAlphanumericUnderscoreAlphaFirst) Object.defineProperty(String.prototype, \"onlyAlphanumericUnderscoreAlphaFirst\", {\n    value: function value() {\n      return this.replace(new RegExp(\"^[^a-zA-Z_$]*|[^A-Za-z0-9_$]\", \"g\"), \"\");\n    }\n  });\n  /**\n   * Cast first char of a String in uppercase\n   *\n   * Usage: Ex1: \"oi mesquitao tao tao\".capitalize(); //Oi mesquitao tao tao\n   */\n\n  if (!String.prototype.capitalize) Object.defineProperty(String.prototype, \"capitalize\", {\n    value: function value() {\n      return this.charAt(0).toUpperCase() + this.slice(1);\n    }\n  });\n  /**\n   * Plugin to convert a formatted Brazilian Real String to float.\n   *\n   * Usage: Ex1: \"R$ 100,10\".brazilianRealToFloat();\n   */\n\n  if (!String.prototype.brazilianRealToFloat) Object.defineProperty(String.prototype, \"brazilianRealToFloat\", {\n    value: function value() {\n      var val = parseFloat(this.onlyNumbers(\",\").replace(\",\", \".\"));\n      return isNaN(val) ? 0 : val;\n    }\n  });\n  /**\n   * Utility method to check if a String is a valid email.\n   *\n   * Usage: Ex1: \"rodrigo@ae.com\".isEmail();\n   */\n\n  if (!String.prototype.isEmail) Object.defineProperty(String.prototype, \"isEmail\", {\n    value: function value() {\n      var pattern = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return pattern.test(this);\n    }\n  });\n  /**\n   * Utility method to check if a String is a valid URL.\n   *\n   * Usage: Ex1: \"http://test.com.br\".isURL();\n   */\n\n  if (!String.prototype.isURL) Object.defineProperty(String.prototype, \"isURL\", {\n    value: function value() {\n      var pattern = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/;\n      return pattern.test(this);\n    }\n  });\n  /**\n   * Utility method to check if a String is a valid CPF.\n   *\n   * Usage: Ex1: \"02687403130\".isCPF();\n   */\n\n  if (!String.prototype.isCPF) Object.defineProperty(String.prototype, \"isCPF\", {\n    value: function value() {\n      var numbers,\n          digits,\n          sum,\n          i,\n          result,\n          equalDigits = 1;\n\n      if (this.length < 11) {\n        return false;\n      }\n\n      for (i = 0; i < this.length - 1; i++) {\n        if (this.charAt(i) !== this.charAt(i + 1)) {\n          equalDigits = 0;\n          break;\n        }\n      }\n\n      if (!equalDigits) {\n        numbers = this.substring(0, 9);\n        digits = this.substring(9);\n        sum = 0;\n\n        for (i = 10; i > 1; i--) {\n          sum += numbers.charAt(10 - i) * i;\n        }\n\n        result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n        if (result !== Number(digits.charAt(0))) return false;\n        numbers = this.substring(0, 10);\n        sum = 0;\n\n        for (i = 11; i > 1; i--) {\n          sum += numbers.charAt(11 - i) * i;\n        }\n\n        result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n        return result === Number(digits.charAt(1));\n      } else {\n        return false;\n      }\n    }\n  });\n  /**\n   * Utility method to check if a String is a valid CNPJ.\n   */\n\n  if (!String.prototype.isCNPJ) Object.defineProperty(String.prototype, \"isCNPJ\", {\n    value: function value() {\n      var numbers,\n          digits,\n          sum,\n          i,\n          result,\n          position,\n          size,\n          equalDigits = 1;\n      if (this.length < 14 && this.length < 15) return false;\n\n      for (i = 0; i < this.length - 1; i++) {\n        if (this.charAt(i) !== this.charAt(i + 1)) {\n          equalDigits = 0;\n          break;\n        }\n      }\n\n      if (!equalDigits) {\n        size = this.length - 2;\n        numbers = this.substring(0, size);\n        digits = this.substring(size);\n        sum = 0;\n        position = size - 7;\n\n        for (i = size; i >= 1; i--) {\n          sum += numbers.charAt(size - i) * position--;\n          if (position < 2) position = 9;\n        }\n\n        result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n        if (result !== Number(digits.charAt(0))) return false;\n        size += 1;\n        numbers = this.substring(0, size);\n        sum = 0;\n        position = size - 7;\n\n        for (i = size; i >= 1; i--) {\n          sum += numbers.charAt(size - i) * position--;\n          if (position < 2) position = 9;\n        }\n\n        result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n        return result === Number(digits.charAt(1));\n      } else return false;\n    }\n  });\n  /**\n   * Plugin to count the number of characters present in a current string\n   * @param c: Character to be counted, ex: -.,, _-, , -, _-\n   *\n   * Usage: Ex1: \"ABCCD\".count(\"C\"); //2\n   */\n\n  if (!String.prototype.count) Object.defineProperty(String.prototype, \"count\", {\n    value: function value(c) {\n      if (c) {\n        var size = this.match(new RegExp(c, 'g'));\n        return size && size !== null ? size.length : 0;\n      }\n\n      return 0;\n    }\n  });\n  /**\n   * Plugin to check if a given String contains given value.\n   * @param c: Character to be searched into String, ex: -.,, _-, , -, _-, AA, B, etc.\n   *\n   * Usage: Ex1: \"aew\".contains('a'); //true\n   */\n\n  if (!String.prototype.safeContains) Object.defineProperty(String.prototype, \"safeContains\", {\n    value: function value(c) {\n      return c !== undefined && (c + \"\").length > 0 ? this.indexOf(c + \"\") !== -1 : false;\n    }\n  });\n  /**\n   * Define a function to replace all chars to an string.\n   *\n   * @param from: String to be replaced.\n   * @param to: String to replace.\n   *\n   * Usage: Ex1: \"RODRIGO\".replaceAll('O', 'E'); //REDRIGE\n   */\n\n  if (!String.prototype.replaceAll) Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function value(from, to) {\n      var escapeRegExp = function escapeRegExp(string) {\n        return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n      };\n\n      return this.replace(new RegExp(escapeRegExp(from), 'g'), to);\n    }\n  });\n  /**\n   * Define a function to replace tokens of a given JSON object.\n   * For each JSON key try to find corresponding token on base string and replace with JSON[key] value\n   *\n   * @param json: JSON tokens to replace base string.\n   * @param defaultDelimiterActive: If true, default REACT ROUTER delimiter will be used in conjuction with json key\n   *\n   * Usage: Ex1: \"/path/:idPath\".replaceTokens({idPath: \"aew\"}); ///path/aew\n   *        Ex2: \"/path/:idPath\".replaceTokens({idPath: \"aew\"}, false); ///path/:aew\n   *        Ex3: \"aew rodrigo aew\".replaceTokens({rodrigo: \"aewww\"}); ///aew rodrigo aew\n   *        Ex4: \"aew rodrigo aew\".replaceTokens({rodrigo: \"aewww\"}, false); ///aew aewww aew\n   */\n\n  if (!String.prototype.replaceTokens) Object.defineProperty(String.prototype, \"replaceTokens\", {\n    value: function value(json) {\n      var defaultDelimiterActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!json || Object.keys(json).length === 0) return this;\n      var str = this;\n\n      for (var key in json) {\n        if (json.hasOwnProperty(key)) str = str.replace((defaultDelimiterActive ? \":\" : \"\") + key, json[key]);\n      }\n\n      return str;\n    }\n  });\n  /**\n   * Replace a char in specific index\n   * @param index\n   * @param character\n   * @returns {string}\n   */\n\n  if (!String.prototype.replaceAt) Object.defineProperty(String.prototype, \"replaceAt\", {\n    value: function value(index, character) {\n      return this.substr(0, index) + character + this.substr(index + character.length);\n    }\n  });\n  /**\n   * Reverse the String\n   *\n   * Usage: Ex1: \"RODRIGO\".reverse();\n   */\n\n  if (!String.prototype.reverse) Object.defineProperty(String.prototype, \"reverse\", {\n    value: function value() {\n      return this.split(\"\").reverse().join(\"\");\n    }\n  });\n  /**\n   * Unmask a String value leaving only Alphanumeric chars.\n   *\n   * Usage: Ex1: '026.874.031-30'.unmask(); //02687403130\n   */\n\n  if (!String.prototype.unmask) Object.defineProperty(String.prototype, \"unmask\", {\n    value: function value() {\n      var exp = /[^A-Za-z0-9]/g;\n      return this.replace(exp, \"\");\n    }\n  });\n  /***\n   * Generic fixed size mask formatter.\n   *\n   * @param mask: The mask to be applied on current value\n   * @param fillReverse: Boolean value. If true, applies the mask from right to left, if false or undefined,\n   * applies from left to right.\n   *\n   * Usage: Ex1: '02687403130'.mask('000.000.000-00'); //026.874.031-30\n   *        Ex2: '02687403130'.mask('000.000.000-00', true); //026.874.031-30\n   *        Ex3: '0268'.mask('000.000.000-00'); //026.8\n   *        Ex4: '0268740'.mask('000.000.000-00'); //026.874.0\n   *        Ex5: '0268'.mask('000.000.000-00', true); //02-68\n   *        Ex6: '026874031'.mask('000.000.000-00', true); //0.268.740-31\n   *\n   * @see Another approach is Number.format for dynamic size numbers, money, etc.\n   *\n   */\n\n  if (!String.prototype.mask) Object.defineProperty(String.prototype, \"mask\", {\n    value: function value(mask) {\n      var fillReverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!mask || typeof mask !== 'string') return this;\n      var value = fillReverse === true ? this.unmask().reverse() : this.unmask();\n      var maskArray = fillReverse === true ? mask.split('').reverse() : mask.split('');\n      var delimiters = ['(', ')', '{', '}', '[', ']', '\"', '\\'', '<', '>', '/', '*', '\\\\', '%', '?', ';', ':', '&', '$', '#', '@', '!', '-', '_', '+', '=', '~', '`', '^', '.', ','];\n      maskArray.forEach(function (e, idx) {\n        if (delimiters.safeContains(e) && value.slice(idx) !== '') value = [value.slice(0, idx), e, value.slice(idx)].join('');\n      });\n      return fillReverse === true ? value.reverse() : value;\n    }\n  });\n  /***\n   * Mask CPF shortcut\n   */\n\n  if (!String.prototype.maskCPF) Object.defineProperty(String.prototype, \"maskCPF\", {\n    value: function value() {\n      return this.unmask().mask('000.000.000-00');\n    }\n  });\n  /***\n   * Mask CNPJ shortcut\n   */\n\n  if (!String.prototype.maskCNPJ) Object.defineProperty(String.prototype, \"maskCNPJ\", {\n    value: function value() {\n      return this.unmask().mask('00.000.000/0000-00');\n    }\n  });\n  /***\n   * Mask CPF/CNPJ shortcut based on string length\n   */\n\n  if (!String.prototype.maskCPForCNPJ) Object.defineProperty(String.prototype, \"maskCPForCNPJ\", {\n    value: function value() {\n      return this.unmask().length <= 11 ? this.maskCPF() : this.maskCNPJ();\n    }\n  });\n  /***\n   * Mask telefone shortcut based on string length\n   */\n\n  if (!String.prototype.maskTelefone) Object.defineProperty(String.prototype, \"maskTelefone\", {\n    value: function value() {\n      return parseInt(this.unmask().firstChar()) >= 7 ? this.mask(\"00000-0000\") : this.mask(\"0000-0000\");\n    }\n  });\n  if (!String.prototype.isCelular) Object.defineProperty(String.prototype, \"isCelular\", {\n    value: function value() {\n      return parseInt(this.unmask().firstChar()) >= 7;\n    }\n  });\n  /***\n   * Return the first char from the current string\n   *\n   * @param uppercase: If true, return char as uppercase, otherwise, returns lowercase\n   */\n\n  if (!String.prototype.firstChar) Object.defineProperty(String.prototype, \"firstChar\", {\n    value: function value() {\n      var uppercase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var value = this.substring(0, 1);\n      return uppercase ? value.toUpperCase() : value.toLowerCase();\n    }\n  });\n  /***\n   * Truncate the string on desired char\n   *\n   * @param n: Size of returning string\n   * @param useReticence: If true, concat ... at end of returning string\n   */\n\n  if (!String.prototype.truncate) Object.defineProperty(String.prototype, \"truncate\", {\n    value: function value(n) {\n      var useReticence = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (this.length <= n) return this.toString();\n      var subString = this.substr(0, n - 1);\n      subString = subString.substr(0, subString.lastIndexOf(' '));\n      return useReticence ? subString + \" ...\" : subString;\n    }\n  }); // --- ARRAYS EXTENSIONS\n\n  /**\n   * Plugin to check if a Arrays contains given value.\n   * @param c: Character to be searched into String, ex: -.,, _-, , -, _-, AA, B, etc.\n   *\n   * Usage: Ex1: \"aew\".safeContains('a');\n   */\n\n  if (!Array.prototype.safeContains) Object.defineProperty(Array.prototype, \"safeContains\", {\n    value: function value(c) {\n      return c !== undefined ? this.indexOf(c) !== -1 : false;\n    }\n  });\n  /**\n   * Randomize array data\n   *\n   * Usage: Ex1: \"aew\".shuffle();\n   */\n\n  if (!Array.prototype.shuffle) Array.prototype.shuffle = function () {\n    var i = this.length,\n        j,\n        temp;\n    if (i === 0) return this;\n\n    while (--i) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = this[i];\n      this[i] = this[j];\n      this[j] = temp;\n    }\n\n    return this;\n  };\n})();","map":{"version":3,"sources":["/Users/brunogomes/desafio/frontend/principal/src/common/Extensions.js"],"names":["console","debug","Number","prototype","format","Object","defineProperty","value","n","x","s","c","re","num","toFixed","Math","max","replace","RegExp","formatAsBRL","signed","String","onlyNumbers","patternBase","onlyAlpha","onlyAlphanumeric","onlyAlphanumericUnderscoreAlphaFirst","capitalize","charAt","toUpperCase","slice","brazilianRealToFloat","val","parseFloat","isNaN","isEmail","pattern","test","isURL","isCPF","numbers","digits","sum","i","result","equalDigits","length","substring","isCNPJ","position","size","count","match","safeContains","undefined","indexOf","replaceAll","from","to","escapeRegExp","string","replaceTokens","json","defaultDelimiterActive","keys","str","key","hasOwnProperty","replaceAt","index","character","substr","reverse","split","join","unmask","exp","mask","fillReverse","maskArray","delimiters","forEach","e","idx","maskCPF","maskCNPJ","maskCPForCNPJ","maskTelefone","parseInt","firstChar","isCelular","uppercase","toLowerCase","truncate","useReticence","toString","subString","lastIndexOf","Array","shuffle","j","temp","floor","random"],"mappings":"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","sourcesContent":["/**\n * PLUGINS, EXTENSIONS AND UTILS\n *\n * @AUTHOR RODRIGO\n */\n\n(function () {\n\tconsole.debug(\"Applying JS extensions ...\");\n\n// --- NUMBER EXTENSIONS\n\n\t/**\n\t * Plugin for formatting numberssafeContains\n\t * Number.prototype.format(n, x, s, c)\n\t *\n\t * @param n: Decimal size, eg: 2\n\t * @param x: Thousands or blocks size, eg: 3\n\t * @param s: Delimiters of the thousands or blocks, eg: '.'\n\t * @param c: Decimal delimiter, eg: ','\n\t *\n\t * Usage: Ex1: new Number(10000).format(2, 3, '.', ',');\n\t *        Ex2: parseFloat(10000).format(2, 3, '.', ',');\n\t *        Ex3: parseInt(10000).format(2, 3, '.', ',');\n\t *\n\t * @see Another approach is String.mask\n\t */\n\tif (!Number.prototype.format)\n\t\tObject.defineProperty(Number.prototype, \"format\", {\n\t\t\tvalue: function (n = 2, x = 3, s = '.', c = ',') {\n\t\t\t\tlet re = '\\\\d(?=(\\\\d{' + (x || 3) + '})+' + (n > 0 ? '\\\\D' : '$') + ')';\n\t\t\t\tlet num = this.toFixed(Math.max(0, ~~n));\n\t\t\t\treturn (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Plugin for formatting Brazilian Real numbers\n\t *\n\t * @param signed: Boolean true or false. If true or undefined, return que output number with 'R$' sign,\n\t * if false, returns formatted number only.\n\t *\n\t * Usage: Ex1: new Number(10000).formatAsBRL();\n\t *        Ex2: Number(10000.32).formatAsBRL();\n\t */\n\tif (!Number.prototype.formatAsBRL)\n\t\tObject.defineProperty(Number.prototype, \"formatAsBRL\", {\n\t\t\tvalue: function (signed = true) {\n\t\t\t\treturn `${signed ? \"R$ \" : ''}${this.format()}`;\n\t\t\t}\n\t\t});\n\n\n// --- STRING EXTENSIONS\n\n\t/**\n\t * Plugin to extract numbers of Strings, returns a String containing only numbers and other escaped characters.\n\t * @param s: Chars to scape, ex: -.,, _-, , -, _-\n\t *\n\t * Usage: Ex1: \"ABC123D-F*G\".onlyNumbers();\n\t * Usage: Ex2: \"ABC123D-F*G\".onlyNumbers(\"D\");\n\t * Usage: Ex3: \"ABC123D-F*G\".onlyNumbers(\"FG\");\n\t * Usage: Ex4: \"ABC123D-F*G\".onlyNumbers(\"FG*-\");\n\t * Usage: Ex5: \"ABC123D-F*G\".onlyNumbers(\"*-\");\n\t */\n\tif (!String.prototype.onlyNumbers)\n\t\tObject.defineProperty(String.prototype, \"onlyNumbers\", {\n\t\t\tvalue: function (s) {\n\t\t\t\tlet patternBase = \"[^0-9{*}]\";\n\n\t\t\t\tif (s)\n\t\t\t\t\tpatternBase = patternBase.replace(\"{*}\", s);\n\t\t\t\telse\n\t\t\t\t\tpatternBase = patternBase.replace(\"{*}\", \"\");\n\n\t\t\t\treturn this.replace(new RegExp(patternBase, \"g\"), \"\");\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Plugin to extract Alpha chars of Strings, returns a String containing only Alpha and other escaped characters.\n\t * @param s: Chars to scape, ex: -.,, _-, , -, _-\n\t *\n\t * Usage: Ex1: \"ABC123D-F*G\".onlyAlpha();\n\t * Usage: Ex2: \"ABC123D-F*G\".onlyAlpha(\"1\");\n\t * Usage: Ex3: \"ABC123D-F*G\".onlyAlpha(\"23\");\n\t * Usage: Ex4: \"ABC123D-F*G\".onlyAlpha(\"-\");\n\t * Usage: Ex5: \"ABC123D-F*G\".onlyAlpha(\"*-\");\n\t */\n\tif (!String.prototype.onlyAlpha)\n\t\tObject.defineProperty(String.prototype, \"onlyAlpha\", {\n\t\t\tvalue: function (s) {\n\t\t\t\tlet patternBase = \"[^A-Za-z{*}]\";\n\n\t\t\t\tif (s)\n\t\t\t\t\tpatternBase = patternBase.replace(\"{*}\", s);\n\t\t\t\telse\n\t\t\t\t\tpatternBase = patternBase.replace(\"{*}\", \"\");\n\n\t\t\t\treturn this.replace(new RegExp(patternBase, \"g\"), \"\");\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Plugin to extract Alphanumeric chars of Strings, returns a String containing only Alphanumeric and other escaped characters.\n\t * @param s: Chars to scape, ex: -.,, _-, , -, _-\n\t *\n\t * Usage: Ex1: \"ABC123D-F*G\".onlyAlphanumeric(); //ABC123DFG\n\t * Usage: Ex2: \"ABC123D-F*G\".onlyAlphanumeric(\"*\"); //ABC123DF*G\n\t */\n\tif (!String.prototype.onlyAlphanumeric)\n\t\tObject.defineProperty(String.prototype, \"onlyAlphanumeric\", {\n\t\t\tvalue: function (s = \"\") {\n\t\t\t\treturn this.replace(new RegExp(`[^A-Za-z0-9${s}]`, \"g\"), \"\");\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Same of Alphanumeric, but don't allow number as first char of a String\n\t * @param s: Chars to scape, ex: -.,, _-, , -, _-\n\t *\n\t * Usage: Ex1: \"098ABC123D-F*G\".onlyAlphanumeric(); //ABC123DFG\n\t * Usage: Ex2: \"7-65ABC123D-F*G\".onlyAlphanumeric(\"*-\"); //-ABC123DF*G\n\t */\n\tif (!String.prototype.onlyAlphanumericUnderscoreAlphaFirst)\n\t\tObject.defineProperty(String.prototype, \"onlyAlphanumericUnderscoreAlphaFirst\", {\n\t\t\tvalue: function () {\n\t\t\t\treturn this.replace(new RegExp(`^[^a-zA-Z_$]*|[^A-Za-z0-9_$]`, \"g\"), \"\");\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Cast first char of a String in uppercase\n\t *\n\t * Usage: Ex1: \"oi mesquitao tao tao\".capitalize(); //Oi mesquitao tao tao\n\t */\n\tif (!String.prototype.capitalize)\n\t\tObject.defineProperty(String.prototype, \"capitalize\", {\n\t\t\tvalue: function () {\n\t\t\t\treturn this.charAt(0).toUpperCase() + this.slice(1);\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Plugin to convert a formatted Brazilian Real String to float.\n\t *\n\t * Usage: Ex1: \"R$ 100,10\".brazilianRealToFloat();\n\t */\n\tif (!String.prototype.brazilianRealToFloat)\n\t\tObject.defineProperty(String.prototype, \"brazilianRealToFloat\", {\n\t\t\tvalue: function () {\n\t\t\t\tlet val = parseFloat(this.onlyNumbers(\",\").replace(\",\", \".\"));\n\t\t\t\treturn isNaN(val) ? 0 : val;\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Utility method to check if a String is a valid email.\n\t *\n\t * Usage: Ex1: \"rodrigo@ae.com\".isEmail();\n\t */\n\tif (!String.prototype.isEmail)\n\t\tObject.defineProperty(String.prototype, \"isEmail\", {\n\t\t\tvalue: function () {\n\t\t\t\tlet pattern = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\t\t\t\treturn pattern.test(this);\n\t\t\t}\n\t\t});\n\n\t/**\n\t * Utility method to check if a String is a valid URL.\n\t *\n\t * Usage: Ex1: \"http://test.com.br\".isURL();\n\t */\n\tif (!String.prototype.isURL)\n\t\tObject.defineProperty(String.prototype, \"isURL\", {\n\t\t\tvalue: function () {\n\t\t\t\tlet pattern = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/;\n\t\t\t\treturn pattern.test(this);\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Utility method to check if a String is a valid CPF.\n\t *\n\t * Usage: Ex1: \"02687403130\".isCPF();\n\t */\n\tif (!String.prototype.isCPF)\n\t\tObject.defineProperty(String.prototype, \"isCPF\", {\n\t\t\tvalue: function () {\n\t\t\t\tlet numbers, digits, sum, i, result, equalDigits = 1;\n\n\t\t\t\tif (this.length < 11) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < this.length - 1; i++) {\n\t\t\t\t\tif (this.charAt(i) !== this.charAt(i + 1)) {\n\t\t\t\t\t\tequalDigits = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!equalDigits) {\n\t\t\t\t\tnumbers = this.substring(0, 9);\n\t\t\t\t\tdigits = this.substring(9);\n\t\t\t\t\tsum = 0;\n\n\t\t\t\t\tfor (i = 10; i > 1; i--)\n\t\t\t\t\t\tsum += numbers.charAt(10 - i) * i;\n\n\t\t\t\t\tresult = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n\t\t\t\t\tif (result !== Number(digits.charAt(0)))\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\tnumbers = this.substring(0, 10);\n\t\t\t\t\tsum = 0;\n\n\t\t\t\t\tfor (i = 11; i > 1; i--)\n\t\t\t\t\t\tsum += numbers.charAt(11 - i) * i;\n\n\t\t\t\t\tresult = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n\t\t\t\t\treturn result === Number(digits.charAt(1));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Utility method to check if a String is a valid CNPJ.\n\t */\n\tif (!String.prototype.isCNPJ)\n\t\tObject.defineProperty(String.prototype, \"isCNPJ\", {\n\t\t\tvalue: function () {\n\t\t\t\tlet numbers, digits, sum, i, result, position, size, equalDigits = 1;\n\t\t\t\tif (this.length < 14 && this.length < 15)\n\t\t\t\t\treturn false;\n\t\t\t\tfor (i = 0; i < this.length - 1; i++)\n\t\t\t\t\tif (this.charAt(i) !== this.charAt(i + 1)) {\n\t\t\t\t\t\tequalDigits = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tif (!equalDigits) {\n\t\t\t\t\tsize = this.length - 2;\n\t\t\t\t\tnumbers = this.substring(0, size);\n\t\t\t\t\tdigits = this.substring(size);\n\t\t\t\t\tsum = 0;\n\t\t\t\t\tposition = size - 7;\n\t\t\t\t\tfor (i = size; i >= 1; i--) {\n\t\t\t\t\t\tsum += numbers.charAt(size - i) * position--;\n\t\t\t\t\t\tif (position < 2)\n\t\t\t\t\t\t\tposition = 9;\n\t\t\t\t\t}\n\t\t\t\t\tresult = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\t\t\t\t\tif (result !== Number(digits.charAt(0)))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tsize += 1;\n\t\t\t\t\tnumbers = this.substring(0, size);\n\t\t\t\t\tsum = 0;\n\t\t\t\t\tposition = size - 7;\n\t\t\t\t\tfor (i = size; i >= 1; i--) {\n\t\t\t\t\t\tsum += numbers.charAt(size - i) * position--;\n\t\t\t\t\t\tif (position < 2)\n\t\t\t\t\t\t\tposition = 9;\n\t\t\t\t\t}\n\t\t\t\t\tresult = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n\t\t\t\t\treturn result === Number(digits.charAt(1));\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Plugin to count the number of characters present in a current string\n\t * @param c: Character to be counted, ex: -.,, _-, , -, _-\n\t *\n\t * Usage: Ex1: \"ABCCD\".count(\"C\"); //2\n\t */\n\tif (!String.prototype.count)\n\t\tObject.defineProperty(String.prototype, \"count\", {\n\t\t\tvalue: function (c) {\n\t\t\t\tif (c) {\n\t\t\t\t\tlet size = this.match(new RegExp(c, 'g'));\n\t\t\t\t\treturn size && size !== null ? size.length : 0;\n\t\t\t\t}\n\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Plugin to check if a given String contains given value.\n\t * @param c: Character to be searched into String, ex: -.,, _-, , -, _-, AA, B, etc.\n\t *\n\t * Usage: Ex1: \"aew\".contains('a'); //true\n\t */\n\tif (!String.prototype.safeContains)\n\t\tObject.defineProperty(String.prototype, \"safeContains\", {\n\t\t\tvalue: function (c) {\n\t\t\t\treturn (c !== undefined && (c + \"\").length > 0) ? this.indexOf(c + \"\") !== -1 : false;\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Define a function to replace all chars to an string.\n\t *\n\t * @param from: String to be replaced.\n\t * @param to: String to replace.\n\t *\n\t * Usage: Ex1: \"RODRIGO\".replaceAll('O', 'E'); //REDRIGE\n\t */\n\tif (!String.prototype.replaceAll)\n\t\tObject.defineProperty(String.prototype, \"replaceAll\", {\n\t\t\tvalue: function (from, to) {\n\t\t\t\tlet escapeRegExp = function escapeRegExp(string) {\n\t\t\t\t\treturn string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n\t\t\t\t};\n\n\t\t\t\treturn this.replace(new RegExp(escapeRegExp(from), 'g'), to);\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Define a function to replace tokens of a given JSON object.\n\t * For each JSON key try to find corresponding token on base string and replace with JSON[key] value\n\t *\n\t * @param json: JSON tokens to replace base string.\n\t * @param defaultDelimiterActive: If true, default REACT ROUTER delimiter will be used in conjuction with json key\n\t *\n\t * Usage: Ex1: \"/path/:idPath\".replaceTokens({idPath: \"aew\"}); ///path/aew\n\t *        Ex2: \"/path/:idPath\".replaceTokens({idPath: \"aew\"}, false); ///path/:aew\n\t *        Ex3: \"aew rodrigo aew\".replaceTokens({rodrigo: \"aewww\"}); ///aew rodrigo aew\n\t *        Ex4: \"aew rodrigo aew\".replaceTokens({rodrigo: \"aewww\"}, false); ///aew aewww aew\n\t */\n\tif (!String.prototype.replaceTokens)\n\t\tObject.defineProperty(String.prototype, \"replaceTokens\", {\n\t\t\tvalue: function (json, defaultDelimiterActive = true) {\n\t\t\t\tif (!json || Object.keys(json).length === 0)\n\t\t\t\t\treturn this;\n\n\t\t\t\tlet str = this;\n\n\t\t\t\tfor (let key in json)\n\t\t\t\t\tif (json.hasOwnProperty(key))\n\t\t\t\t\t\tstr = str.replace((defaultDelimiterActive ? \":\" : \"\") + key, json[key]);\n\n\t\t\t\treturn str;\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Replace a char in specific index\n\t * @param index\n\t * @param character\n\t * @returns {string}\n\t */\n\tif (!String.prototype.replaceAt)\n\t\tObject.defineProperty(String.prototype, \"replaceAt\", {\n\t\t\tvalue: function (index, character) {\n\t\t\t\treturn this.substr(0, index) + character + this.substr(index + character.length);\n\t\t\t}\n\t\t});\n\n\t/**\n\t * Reverse the String\n\t *\n\t * Usage: Ex1: \"RODRIGO\".reverse();\n\t */\n\tif (!String.prototype.reverse)\n\t\tObject.defineProperty(String.prototype, \"reverse\", {\n\t\t\tvalue: function () {\n\t\t\t\treturn this.split(\"\").reverse().join(\"\");\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Unmask a String value leaving only Alphanumeric chars.\n\t *\n\t * Usage: Ex1: '026.874.031-30'.unmask(); //02687403130\n\t */\n\tif (!String.prototype.unmask)\n\t\tObject.defineProperty(String.prototype, \"unmask\", {\n\t\t\tvalue: function () {\n\t\t\t\tlet exp = /[^A-Za-z0-9]/g;\n\t\t\t\treturn this.replace(exp, \"\");\n\t\t\t}\n\t\t});\n\n\n\t/***\n\t * Generic fixed size mask formatter.\n\t *\n\t * @param mask: The mask to be applied on current value\n\t * @param fillReverse: Boolean value. If true, applies the mask from right to left, if false or undefined,\n\t * applies from left to right.\n\t *\n\t * Usage: Ex1: '02687403130'.mask('000.000.000-00'); //026.874.031-30\n\t *        Ex2: '02687403130'.mask('000.000.000-00', true); //026.874.031-30\n\t *        Ex3: '0268'.mask('000.000.000-00'); //026.8\n\t *        Ex4: '0268740'.mask('000.000.000-00'); //026.874.0\n\t *        Ex5: '0268'.mask('000.000.000-00', true); //02-68\n\t *        Ex6: '026874031'.mask('000.000.000-00', true); //0.268.740-31\n\t *\n\t * @see Another approach is Number.format for dynamic size numbers, money, etc.\n\t *\n\t */\n\tif (!String.prototype.mask)\n\t\tObject.defineProperty(String.prototype, \"mask\", {\n\t\t\tvalue: function (mask, fillReverse = false) {\n\t\t\t\tif (!mask || typeof mask !== 'string')\n\t\t\t\t\treturn this;\n\n\t\t\t\tlet value = (fillReverse === true) ? this.unmask().reverse() : this.unmask();\n\t\t\t\tlet maskArray = (fillReverse === true) ? mask.split('').reverse() : mask.split('');\n\n\t\t\t\tlet delimiters = ['(', ')', '{', '}', '[', ']', '\"', '\\'', '<', '>', '/', '*', '\\\\', '%', '?', ';',\n\t\t\t\t\t':', '&', '$', '#', '@', '!', '-', '_', '+', '=', '~', '`', '^', '.', ','];\n\n\t\t\t\tmaskArray.forEach(function (e, idx) {\n\t\t\t\t\tif (delimiters.safeContains(e) && value.slice(idx) !== '')\n\t\t\t\t\t\tvalue = [value.slice(0, idx), e, value.slice(idx)].join('');\n\t\t\t\t});\n\n\t\t\t\treturn (fillReverse === true) ? value.reverse() : value;\n\t\t\t}\n\t\t});\n\n\n\t/***\n\t * Mask CPF shortcut\n\t */\n\tif (!String.prototype.maskCPF)\n\t\tObject.defineProperty(String.prototype, \"maskCPF\", {\n\t\t\tvalue: function () {\n\t\t\t\treturn this.unmask().mask('000.000.000-00');\n\t\t\t}\n\t\t});\n\n\n\t/***\n\t * Mask CNPJ shortcut\n\t */\n\tif (!String.prototype.maskCNPJ)\n\t\tObject.defineProperty(String.prototype, \"maskCNPJ\", {\n\t\t\tvalue: function () {\n\t\t\t\treturn this.unmask().mask('00.000.000/0000-00');\n\t\t\t}\n\t\t});\n\n\n\t/***\n\t * Mask CPF/CNPJ shortcut based on string length\n\t */\n\tif (!String.prototype.maskCPForCNPJ)\n\t\tObject.defineProperty(String.prototype, \"maskCPForCNPJ\", {\n\t\t\tvalue: function () {\n\t\t\t\treturn this.unmask().length <= 11 ? this.maskCPF() : this.maskCNPJ();\n\t\t\t}\n\t\t});\n\n\n\t/***\n\t * Mask telefone shortcut based on string length\n\t */\n\tif (!String.prototype.maskTelefone)\n\t\tObject.defineProperty(String.prototype, \"maskTelefone\", {\n\t\t\tvalue: function () {\n\t\t\t\treturn parseInt(this.unmask().firstChar()) >= 7 ? this.mask(\"00000-0000\") : this.mask(\"0000-0000\");\n\t\t\t}\n\t\t});\n\n\tif (!String.prototype.isCelular)\n\t\tObject.defineProperty(String.prototype, \"isCelular\", {\n\t\t\tvalue: function () {\n\t\t\t\treturn parseInt(this.unmask().firstChar()) >= 7;\n\t\t\t}\n\t\t});\n\n\t/***\n\t * Return the first char from the current string\n\t *\n\t * @param uppercase: If true, return char as uppercase, otherwise, returns lowercase\n\t */\n\tif (!String.prototype.firstChar)\n\t\tObject.defineProperty(String.prototype, \"firstChar\", {\n\t\t\tvalue: function (uppercase = false) {\n\t\t\t\tlet value = this.substring(0, 1);\n\n\t\t\t\treturn uppercase\n\t\t\t\t\t? value.toUpperCase()\n\t\t\t\t\t: value.toLowerCase();\n\t\t\t}\n\t\t});\n\n\t/***\n\t * Truncate the string on desired char\n\t *\n\t * @param n: Size of returning string\n\t * @param useReticence: If true, concat ... at end of returning string\n\t */\n\tif (!String.prototype.truncate)\n\t\tObject.defineProperty(String.prototype, \"truncate\", {\n\t\t\tvalue: function (n, useReticence = true) {\n\t\t\t\tif (this.length <= n)\n\t\t\t\t\treturn this.toString();\n\n\t\t\t\tlet subString = this.substr(0, n - 1);\n\t\t\t\tsubString = subString.substr(0, subString.lastIndexOf(' '));\n\n\t\t\t\treturn (useReticence ? subString + \" ...\" : subString);\n\t\t\t}\n\t\t});\n\n\n// --- ARRAYS EXTENSIONS\n\n\t/**\n\t * Plugin to check if a Arrays contains given value.\n\t * @param c: Character to be searched into String, ex: -.,, _-, , -, _-, AA, B, etc.\n\t *\n\t * Usage: Ex1: \"aew\".safeContains('a');\n\t */\n\tif (!Array.prototype.safeContains)\n\t\tObject.defineProperty(Array.prototype, \"safeContains\", {\n\t\t\tvalue: function (c) {\n\t\t\t\treturn (c !== undefined) ? this.indexOf(c) !== -1 : false;\n\t\t\t}\n\t\t});\n\n\n\t/**\n\t * Randomize array data\n\t *\n\t * Usage: Ex1: \"aew\".shuffle();\n\t */\n\tif (!Array.prototype.shuffle)\n\t\tArray.prototype.shuffle = function () {\n\t\t\tlet i = this.length, j, temp;\n\t\t\tif (i === 0) return this;\n\n\t\t\twhile (--i) {\n\t\t\t\tj = Math.floor(Math.random() * (i + 1));\n\t\t\t\ttemp = this[i];\n\t\t\t\tthis[i] = this[j];\n\t\t\t\tthis[j] = temp;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n})();\n"]},"metadata":{},"sourceType":"module"}