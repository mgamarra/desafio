{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar StackTrace = _interopDefault(require('stacktrace-js'));\n\nvar reactotronCoreClient = require('reactotron-core-client');\n/**\n * Provides a global error handler to report errors with sourcemap lookup.\n */\n// what to say whe we can't resolve source maps\n\n\nvar CANNOT_RESOLVE_ERROR = 'Unable to resolve error.  Either support CORS by changing webpack\\'s devtool to \"source-map\" or run in offline mode.'; // defaults\n\nvar PLUGIN_DEFAULTS = {\n  offline: false\n}; // our plugin entry point\n\nvar trackGlobalErrors = function trackGlobalErrors(options) {\n  return function (reactotron) {\n    // setup configuration\n    var config = Object.assign({}, PLUGIN_DEFAULTS, options || {}); // holds the previous window.onerror when needed\n\n    var swizzledOnError = null;\n    var isSwizzled = false; // the functionality of our window.onerror.\n    // we could have used window.addEventListener(\"error\", ...) but that doesn't work on all browsers\n\n    function windowOnError(msg, file, line, col, error) {\n      // resolve the stack trace\n      StackTrace.fromError(error, {\n        offline: config.offline\n      }) // then try to send it up to the server\n      .then(function (stackFrames) {\n        return reactotron.error(msg, stackFrames);\n      }) // can't resolve, well, let the user know, but still upload something sane\n      .catch(function (resolvingError) {\n        return reactotron.error({\n          message: CANNOT_RESOLVE_ERROR,\n          original: {\n            msg: msg,\n            file: file,\n            line: line,\n            col: col,\n            error: error\n          },\n          resolvingError: resolvingError\n        });\n      }); // call back the previous window.onerror if we have one\n\n      if (swizzledOnError) {\n        swizzledOnError(msg, file, line, col, error);\n      }\n    } // swizzles window.onerror dropping in our new one\n\n\n    function trackGlobalErrors() {\n      if (isSwizzled) return;\n      swizzledOnError = window.onerror;\n      window.onerror = windowOnError;\n      isSwizzled = true;\n    } // restore the original\n\n\n    function untrackGlobalErrors() {\n      if (!swizzledOnError) return;\n      window.onerror = swizzledOnError;\n      isSwizzled = false;\n    } // auto start this\n\n\n    trackGlobalErrors(); // the reactotron plugin interface\n\n    return {\n      // attach these functions to the Reactotron\n      features: {\n        trackGlobalErrors: trackGlobalErrors,\n        untrackGlobalErrors: untrackGlobalErrors\n      }\n    };\n  };\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n}; // ---------------------\n// DEFAULT CONFIGURATION\n// ---------------------\n\n\nvar REACTOTRON_ASYNC_CLIENT_ID = '@REACTOTRON/clientId';\n/**\n * Safely get some information out the the window.navigator.\n *\n * @param {string} name The property to get.\n */\n\nfunction getNavigatorProperty(name) {\n  if (!name) return undefined;\n  if (!window) return undefined;\n  if (!window.navigator && _typeof(window.navigator) !== \"object\") return undefined;\n  return window.navigator[name];\n}\n\nvar DEFAULTS = {\n  createSocket: function createSocket(path) {\n    return new WebSocket(path);\n  },\n  // eslint-disable-line\n  host: \"localhost\",\n  port: 9090,\n  name: \"React JS App\",\n  client: {\n    reactotronLibraryName: \"reactotron-react-js\",\n    reactotronLibraryVersion: '2.1.1',\n    platform: \"browser\",\n    platformVersion: getNavigatorProperty(\"platform\"),\n    userAgent: getNavigatorProperty(\"userAgent\"),\n    screenWidth: screen && screen.width || undefined,\n    screenHeight: screen && screen.height || undefined,\n    screenScale: window && window.devicePixelRatio || 1,\n    windowWidth: window && window.innerWidth || undefined,\n    windowHeight: window && window.innerHeight || undefined\n  },\n  getClientId: function getClientId() {\n    return Promise.resolve(localStorage.getItem(REACTOTRON_ASYNC_CLIENT_ID));\n  },\n  setClientId: function setClientId(clientId) {\n    localStorage.setItem(REACTOTRON_ASYNC_CLIENT_ID, clientId);\n  }\n}; // -----------\n// HERE WE GO!\n// -----------\n// Create the default reactotron.\n\nvar index = reactotronCoreClient.createClient(DEFAULTS);\nexports.trackGlobalErrors = trackGlobalErrors;\nexports.default = index;","map":null,"metadata":{},"sourceType":"script"}