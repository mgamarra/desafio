{"ast":null,"code":"\"use strict\";\n\nfunction _interopDefault(r) {\n  return r && \"object\" == typeof r && \"default\" in r ? r.default : r;\n}\n\nvar curry = _interopDefault(require(\"ramda/src/curry\")),\n    cond = _interopDefault(require(\"ramda/src/cond\")),\n    isNil = _interopDefault(require(\"ramda/src/isNil\")),\n    identity = _interopDefault(require(\"ramda/src/identity\")),\n    is = _interopDefault(require(\"ramda/src/is\")),\n    T = _interopDefault(require(\"ramda/src/T\")),\n    gte = _interopDefault(require(\"ramda/src/gte\")),\n    complement = _interopDefault(require(\"ramda/src/complement\")),\n    eqProps = _interopDefault(require(\"ramda/src/eqProps\")),\n    isEmpty = _interopDefault(require(\"ramda/src/isEmpty\")),\n    anyPass = _interopDefault(require(\"ramda/src/anyPass\")),\n    pipe = _interopDefault(require(\"ramda/src/pipe\")),\n    toPairs = _interopDefault(require(\"ramda/src/toPairs\")),\n    map = _interopDefault(require(\"ramda/src/map\")),\n    adjust = _interopDefault(require(\"ramda/src/adjust\")),\n    fromPairs = _interopDefault(require(\"ramda/src/fromPairs\")),\n    range = _interopDefault(require(\"ramda/src/range\")),\n    split = _interopDefault(require(\"ramda/src/split\")),\n    path = _interopDefault(require(\"ramda/src/path\")),\n    newStartsWith = _interopDefault(require(\"ramda/src/startsWith\")),\n    newEndsWith = _interopDefault(require(\"ramda/src/endsWith\")),\n    find = _interopDefault(require(\"ramda/src/find\")),\n    propEq = _interopDefault(require(\"ramda/src/propEq\")),\n    findIndex = _interopDefault(require(\"ramda/src/findIndex\")),\n    log = function log(r) {\n  return console.log(r), r;\n},\n    trace = curry(function (r, e) {\n  return console.log(r), e;\n}),\n    toNumber = cond([[isNil, identity], [is(Number), identity], [T, function (r) {\n  return Number(r);\n}]]),\n    toDate = function toDate(r) {\n  return cond([[isNil, identity], [is(Object), identity], [T, function (r) {\n    return new Date(r);\n  }]])(r);\n},\n    isWithin = curry(function (r, e, t) {\n  var i = is(Number);\n  return i(r) && i(e) && i(t) && gte(t, r) && gte(e, t);\n}),\n    isNotWithin = complement(isWithin),\n    eqLength = eqProps(\"length\"),\n    random = function random(r, e) {\n  return Math.floor(Math.random() * (e - r + 1)) + r;\n},\n    sample = function sample(r) {\n  if (isNil(r) || isEmpty(r)) return null;\n  var e = r.length - 1;\n  return r[random(0, e)];\n},\n    isNilOrEmpty = anyPass([isNil, isEmpty]),\n    isNotNil = complement(isNil),\n    isUndefined = function isUndefined(r) {\n  return void 0 === r;\n},\n    mapKeys = curry(function (r, e) {\n  return pipe(toPairs, map(adjust(r, 0)), fromPairs)(e);\n}),\n    rangeStep = curry(function (e, t, r) {\n  return 0 === e ? null : 0 < e && r < t ? null : e < 0 && t < r ? null : map(function (r) {\n    return t + e * r;\n  }, range(0, 1 + (r - t) / e >>> 0));\n}),\n    dotPath = curry(function (r, e) {\n  return path(split(\".\", r), e);\n}),\n    startsWith = curry(function (r, e) {\n  return newStartsWith(r, e);\n}),\n    endsWith = curry(function (r, e) {\n  return newEndsWith(r, e);\n}),\n    findByProp = curry(function (r, e, t) {\n  return find(propEq(r, e))(t);\n}),\n    findIndexByProp = curry(function (r, e, t) {\n  return findIndex(propEq(r, e))(t);\n}),\n    Ramdasauce = {\n  log: log,\n  trace: trace,\n  toNumber: toNumber,\n  toDate: toDate,\n  isWithin: isWithin,\n  isNotWithin: isNotWithin,\n  eqLength: eqLength,\n  random: random,\n  sample: sample,\n  isNilOrEmpty: isNilOrEmpty,\n  isNotNil: isNotNil,\n  isUndefined: isUndefined,\n  mapKeys: mapKeys,\n  rangeStep: rangeStep,\n  dotPath: dotPath,\n  startsWith: startsWith,\n  endsWith: endsWith,\n  findByProp: findByProp,\n  findIndexByProp: findIndexByProp\n};\n\nmodule.exports = Ramdasauce, module.exports = Ramdasauce;","map":null,"metadata":{},"sourceType":"script"}